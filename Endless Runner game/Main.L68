00002000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 06/03/2023 20:09:19

00000000                             1  *================================================================================*  
00000000                             2  *================================================================================*
00000000                             3  * Written by : Steve Fasoranti                                                   *
00000000                             4  * Date       : 30/1/2023                                                         *
00000000                             5  * Description: This is an endless runner game called dash where you have to dodge* 
00000000                             6  *               Enemies while they are running towards you                       *
00000000                             7  * Bugs: Fixed a bug where the runner would float to the top of the screen instead*
00000000                             8  *       of being on the ground. Fixed the runner not being able to print to the  *
00000000                             9  *        screen.                                                                 *
00000000                            10  *.----------------.  .----------------.  .----------------.  .----------------.  *
00000000                            11  *| .--------------. || .--------------. || .--------------. || .--------------. |*
00000000                            12  *| |  ________    | || |      __      | || |    _______   | || |  ____  ____  | |*
00000000                            13  *| | |_   ___ `.  | || |     /  \     | || |   /  ___  |  | || | |_   ||   _| | |*
00000000                            14  *| |   | |   `. \ | || |    / /\ \    | || |  |  (__ \_|  | || |   | |__| |   | |*
00000000                            15  *| |   | |    | | | || |   / ____ \   | || |   '.___`-.   | || |   |  __  |   | |*
00000000                            16  *| |  _| |___.' / | || | _/ /    \ \_ | || |  |`\____) |  | || |  _| |  | |_  | |*
00000000                            17  *| | |________.'  | || ||____|  |____|| || |  |_______.'  | || | |____||____| | |*
00000000                            18  *| |              | || |              | || |              | || |              | |*
00000000                            19  *| '--------------' || '--------------' || '--------------' || '--------------' |*
00000000                            20  *'----------------'  '----------------'  '----------------'  '----------------'  *
00000000                            21  *================================================================================*
00000000                            22  *================================================================================*
00000000                            23  *****************************************************///////////////(///////////
00000000                            24  *****************************************************///////////////(///////////
00000000                            25  *///////////////////////////////////////////////******///////////////(///////////
00000000                            26  *///////////////////////////////////*,,,,,,,*//********,,*//////////////////////
00000000                            27  *///*******************************,(%&&&&&&(,******,*#&&%/**///////////////////
00000000                            28  *///*****************************/(#/,,**/#&(,******,*#%(/(#(///////////////////
00000000                            29  *///**************************/((/*,,/(%%&&&(,,**,,,,*#&&%#((/((**//////////////
00000000                            30  **/****************,,,,,,****,/%#,*(#&&&&&&&&%%%%%%%%%&&&&&%**#%**//////////////
00000000                            31  **/***************/#%%%&#/***,/%#//(%&#*******,.......,**/#%/*#%*,*/////////////
00000000                            32  **/************,*#%(*,,*/(((/,/%&%%%%&&%%(((((/*******/((#%&%%&%*,*/////////////
00000000                            33  **/************,*#&%(/*,**(###%&%///#&&%%(((((#########((#%&%%&%*,*///**////////
00000000                            34  ******************/#%/*((*/((#%&&&&&&&&%%(((((*......,/((#%&&&&%*,*///***///////
00000000                            35  *******************,*#%%##(//(#&#*,,(&&%%#####/*******(###%&##%%*,********//////
00000000                            36  *******************/((#%&%%#(/(#%%%%%&&%%%&&#(#%%%%%%#((%&&&%##(************////
00000000                            37  *****************(#/*//***/%%#((##%&&&&%%%&&/.(&&&&&&%*,(&&%(****************///
00000000                            38  ***************,*#&#(****(%&@@@@&%%&&%%%%%&&&&&&&&&&&&&&&&&%/,***************///
00000000                            39  ***************,*(%%#((%%&#(////#&@&&&%%%%&&(,,,*****,,*#&&%/,..,**,     .,***//
00000000                            40  ****************,,*%&%#(((#%%%%%%%&&&&&&&&@@%###%&&%%###&@@&/,,,....  ...,****//
00000000                            41  *,,,,,,,,,,,,,,,,,,*%@%%%%%&@@@@@@@@@&&&&(*******#&&&@@@@@&(**,,,,,,,,,,,******//
00000000                            42  *,,,,,,,,,,,,,,,,,,,,/%@@@@%*,,,,(&&&%%%%(*******(&&&(,,,,,,,,,,,,,,***,,*******,
00000000                            43  *,,,,,,,,,,,,,,,,,,,,,,,,,,,,*/(%&&%%%%(******/#%&&#/*,,,,,,,,,,,,,**********/(%%
00000000                            44  *,,,,,,,,,,,,,,,,,,,,,,,,,,*(#%%%%%%%#(/***/(#%%%##&&(,,,,,,,,,,,,,,,,,,,.*(#%%##
00000000                            45  *,,,,,,,,..............,,/%%##%%%%%&@@&&&&&@@&%%%##&&(,,,,,,,,,,,,,,,,,.*#%%#((((
00000000                            46  *,,,,,,,..............,/%&##%&&&&&&#,,,,,,,,,#@%###%&/,,,,,,,,,,,,,,..*%&%#((((((
00000000                            47  *......................*(######(,............/#####*.............,**/%&%%#####%&&
00000000                            48  *((((((((((((((((((((((((######(((((((((((((((#####((((((((((((((((((((#(((#####%
00000000                            49   
00000000                            50  
00002000                            51      ORG    $2000
00002000                            52  START:                
00002000                            53  
00002000  =00000020                 54  SPACE_KEY               equ $20
00002000  =0000009C                 55  Gravity                 equ $9C    
00002000  =00000013                 56  GET_USER_INPUT_COMMAND  equ 19
00002000  =000000A0                 57  RunnerStartSpriteX      equ 160
00002000  =00000081                 58  EnemyStartSpriteX       equ 129
00002000  =00000004                 59  FRAC_BITS               equ 4
00002000                            60  
00002000                            61  
00002000                            62  *------------------------------------------------------------*
00002000                            63  *------------------------------------------------------------*
00002000                            64  *--------------Main Game screen change code------------------*
00002000                            65  *------------------------------------------------------------*
00002000                            66  *------------------------------------------------------------*
00002000                            67  
00002000  103C 0021                 68          move.b  #(ScreenChangeCode) , d0 ;Changes the screen code and applies it to D0
00002004  223C 02BC0258             69          move.l  #700*$10000+600, d1      ;The resolution of the screen is set to 700 X 600
0000200A  4E4F                      70          trap    #15                      ;Print out the resolution
0000200C                            71  
0000200C                            72  *------------------------------------------------------------*
0000200C                            73  *------------------------------------------------------------*
0000200C                            74  *---------Loading in the loading image using draw image------* 
0000200C                            75  *------------------------------------------------------------*
0000200C                            76  *------------------------------------------------------------*
0000200C                            77         
0000200C  41F9 00135F7E             78          LEA     LoadingImage, a0         ;Print out the loading screen image
00002012  223C 000000A0             79          move.l  #160, d1                 ;Move the value 160 into D1
00002018  243C 000000AA             80          move.l  #170, d2                 ;Move the value 170 into D2
0000201E  263C 0000010E             81          move.l  #270, d3                 ;Move the value 270 into D3
00002024  283C 000000FA             82          move.l  #250, d4                 ;Move the value 250 into D4
0000202A  7A00                      83          move.l  #0, d5                   ;Move the value 0 into D5
0000202C  7C00                      84          move.l  #0, d6                   ;Move the value 0 into D6
0000202E  4EB9 002EE8B8             85          jsr     DRAWIMAGE                ;We use JSR to draw the image with the DRAWIMAGE declared variable 
00002034                            86   
00002034                            87  *------------------------------------------------------------*
00002034                            88  *------------------------------------------------------------*
00002034                            89  *-------------Enable the double buffering--------------------*
00002034                            90  *------------------------------------------------------------*
00002034                            91  *------------------------------------------------------------*
00002034                            92          
00002034  103C 005C                 93          move.b  #92, d0                 ;Move the value 92 into D0
00002038  123C 0011                 94          move.b  #17, d1                 ;Move the value 17 into d1
0000203C  4E4F                      95          trap    #15                     ;Enable the double buffering so the image after the loading screen can load 
0000203E                            96  
0000203E                            97  *------------------------------------------------------------*
0000203E                            98  *------------------------------------------------------------*
0000203E                            99  *------Load in the title music at memory location 0----------*
0000203E                           100  *------------------------------------------------------------*
0000203E                           101  *------------------------------------------------------------*        
0000203E                           102  
0000203E  43F9 000024E4            103          lea     TitleScreenMusic, a1   ;Print out the music at the memory location 0 from the addressline
00002044  123C 0000                104          move.b  #0,d1                  ;Move the value 0 into D1 
00002048  704A                     105          move.l  #74,d0                 ;Move the value 74 into D0
0000204A  4E4F                     106          Trap    #15                    ;The TitleScreenMusic variable is now used
0000204C                           107  
0000204C                           108  *------------------------------------------------------------*
0000204C                           109  *------------------------------------------------------------*
0000204C                           110  *---------Load in the in game music at location 1------------*
0000204C                           111  *------------------------------------------------------------*
0000204C                           112  *------------------------------------------------------------*
0000204C                           113       
0000204C  43F9 000024F8            114          lea     GameMusic, a1         ;Print out the music after the memory location 0 except this is in location 1
00002052  123C 0001                115          move.b  #1,d1                 ;Move the value 1 into D1
00002056  704A                     116          move.l  #74,d0                ;Move the value 74 into D0
00002058  4E4F                     117          Trap    #15                   ;The GameMusic variable is now used
0000205A                           118  
0000205A                           119  *------------------------------------------------------------*
0000205A                           120  *------------------------------------------------------------*
0000205A                           121  *-----Reseting the varibles for the runner-------------------*
0000205A                           122  *------------------------------------------------------------*
0000205A                           123  *------------------------------------------------------------*
0000205A                           124  ResetBattleVariables
0000205A  23FC 0000000A 00002458   125          move.l  #10,RunnerX          ;Move the value 10 into the RunnerX variable declared below
00002064  23FC 00000226 0000245C   126          move.l  #550, RunnerY        ;Move the value 550 into the RunnerY variable declared below
0000206E  23FC 000000A0 00002460   127          move.l  #160, RunnerChunkX   ;Move the value 160 into the RunnerChunkX variable declared below
00002078  23FC 00000000 00002464   128          move.l  #0, RunnerChunkY     ;Move the value 0 into the RunnerChunkY variable declared below
00002082  23FC 0000000A 00002468   129          move.l  #10, RunnerSpeed     ;Move the value 10 into the RunnerSpeed variable declared below
0000208C  23FC 00000000 0000246C   130          move.l  #0, RunnerJumping    ;Move the value 0 into the RunnerJumping variable declared below
00002096  23FC 00000008 00002470   131          move.l  #8, RunnerHealth     ;Move the value 8 into the RunnerHealth variable declared below
000020A0                           132          
000020A0                           133  *------------------------------------------------------------*
000020A0                           134  *------------------------------------------------------------*
000020A0                           135  *-------------Reseting the varibles for the enemy------------*
000020A0                           136  *------------------------------------------------------------*
000020A0                           137  *------------------------------------------------------------*
000020A0  23FC 0000027C 0000248C   138          move.l  #636, EnemyX        ;Move the value 636 into the EnemyX variable declared below
000020AA  23FC 0000021C 00002490   139          move.l  #540, EnemyY        ;Move the value 540 into the EnemyY variable declared below
000020B4  23FC 00000081 00002494   140          move.l  #129, EnemyChunkX   ;Move the value 129 into the EnemyChunkX variable declared below
000020BE  23FC 00000000 00002498   141          move.l  #0, EnemyChunkY     ;Move the value 0 into the EnemyChucnkY variable declared below
000020C8  23FC 0000000A 0000249C   142          move.l  #10, EnemySpeed     ;Move the value 10 into the EnemySpeed variable declared below
000020D2  23FC 00000010 000024B0   143          move.l  #16, EnemyProjectileWidth
000020DC  23FC 0000000C 000024B4   144          move.l  #12, EnemyProjectileHeight
000020E6  23FC 0000000F 000024C0   145          move.l  #15, EnemyProjectileYOffset
000020F0  23FC 00000001 000024CC   146          move.l  #1, EnemyProjectileDamage
000020FA                           147  *------------------------------------------------------------*
000020FA                           148  *------------------------------------------------------------*
000020FA                           149  *----Draw the Title screen after the loading screen----------*
000020FA                           150  *------------------------------------------------------------*
000020FA                           151  *------------------------------------------------------------*
000020FA                           152   
000020FA  41F9 00149EC8            153          lea     TitleScreen, a0    ;Print out the TitleScreen variable
00002100  223C 000002BC            154          move.l  #700, d1           ;Move the value 700 into d1 (image width)
00002106  243C 00000258            155          move.l  #600, d2           ;Move the value 600 into d2 (image length)
0000210C  7600                     156          move.l  #0, d3             ;Move the value 0 into d3
0000210E  7800                     157          move.l  #0, d4             ;Move the value 0 into d4
00002110  7A00                     158          move.l  #0, d5             ;Move the value 0 into d5
00002112  7C00                     159          move.l  #0, d6             ;Move the value 0 into d6
00002114  4EB9 002EE8B8            160          jsr     DRAWIMAGE          ;We use JSR to use the DRAWIMAGE to draw the Title screen
0000211A                           161          
0000211A                           162  *------------------------------------------------------------*
0000211A                           163  *------------------------------------------------------------*
0000211A                           164  *-------------Enable the double buffering--------------------*
0000211A                           165  *------------------------------------------------------------*
0000211A                           166  *------------------------------------------------------------*
0000211A                           167  
0000211A  103C 005E                168          move.b  #94, d0            ;Move the value 94 into D0
0000211E  4E4F                     169          trap    #15                ;Enable the double buffering so the image can load one after the other 
00002120                           170          
00002120                           171          
00002120                           172  *-------------------------------------------------------------*
00002120                           173  *-------------------------------------------------------------*
00002120                           174  *------Play music for the title screen only-------------------*
00002120                           175  *-------------------------------------------------------------*
00002120                           176  *-------------------------------------------------------------*        
00002120                           177  
00002120  123C 0000                178          move.b  #0, d1             ;Move the value 0 into D1
00002124  7402                     179          move.l  #2, d2             ;Move the value 2 into D2
00002126  704B                     180          move.l  #75, d0            ;Move the value 75 into D0
00002128  4E4F                     181          trap    #15                ;Music is now played
0000212A                           182    
0000212A                           183  
0000212A                           184  *------------------------------------------------------------*
0000212A                           185  *------------------------------------------------------------*
0000212A                           186  *------Draw the background of the battle scene---------------*
0000212A                           187  *------------------------------------------------------------*
0000212A                           188  *------------------------------------------------------------*      
0000212A                           189  
0000212A  41F9 00002514            190          lea     BackGround, a0    ;Draw the background for the main gameplay
00002130  223C 000002BC            191          move.l  #700, d1          ;Move the value 700 into D1 (Width of the image)
00002136  243C 00000226            192          move.l  #550, d2          ;Move the value 550 into D2 (Length of the image) 
0000213C  7600                     193          move.l  #0, d3            ;Move the value 0 into D3 
0000213E  7832                     194          move.l  #50, d4           ;Move the value 50 into D4 
00002140  7A00                     195          move.l  #0, d5            ;Move the value 0 into D5
00002142  7C32                     196          move.l  #50, d6           ;Move the value 50 into D6 
00002144  4EB9 002EE8B8            197          jsr     DRAWIMAGE         ;Use JSR to use the DRAWIMAGE to Draw the Background 
0000214A                           198          
0000214A                           199  *------------------------------------------------------------*
0000214A                           200  *------------------------------------------------------------*
0000214A                           201  *-------------Store the players velocity---------------------*
0000214A                           202  *------------------------------------------------------------*
0000214A                           203  *------------------------------------------------------------*        
0000214A                           204  
0000214A  2039 00002480            205          move.l  RunnerVelocity, d0 ;Move the RunnersVelocity variable into D0
00002150  E948                     206          lsl     #FRAC_BITS, d0     ;Logical shift the Fractional Bits (pixels) into D0 
00002152  23C0 00002480            207          move.l  d0, RunnerVelocity ;Move the D0 into the runners velocity 
00002158                           208          
00002158                           209          
00002158                           210  *------------------------------------------------------------*
00002158                           211  *------------------------------------------------------------*
00002158                           212  *---------Store Players postions to the Y coordinate---------*
00002158                           213  *------------------------------------------------------------*
00002158                           214  *------------------------------------------------------------*
00002158                           215  
00002158  2039 0000245C            216          move.l  RunnerY, d0
0000215E  E948                     217          lsl     #FRAC_BITS, d0
00002160  23C0 0000245C            218          move.l  d0, RunnerY        
00002166  2039 00002490            219          move.l  EnemyY, d0
0000216C  E948                     220          lsl     #FRAC_BITS, d0
0000216E  23C0 00002490            221          move.l  d0, EnemyY
00002174                           222  *------------------------------------------------------------*
00002174                           223  *------------------------------------------------------------*
00002174                           224  *--------------Set a black color-----------------------------*
00002174                           225  *------------------------------------------------------------*
00002174                           226  *------------------------------------------------------------*
00002174                           227  
00002174  7050                     228          move.l      #80, d0
00002176  7200                     229          move.l      #$00000000, d1
00002178  4E4F                     230          trap        #15
0000217A  7051                     231          move.l      #81, d0
0000217C  7200                     232          move.l      #$00000000, d1
0000217E  4E4F                     233          trap        #15
00002180                           234          
00002180                           235          
00002180                           236  *------------------------------------------------------------*
00002180                           237  *------------------------------------------------------------*
00002180                           238  *-----------Draw the black box at the top of the screen------*
00002180                           239  *------------------------------------------------------------*
00002180                           240  *------------------------------------------------------------*       
00002180                           241  
00002180  323C 0000                242          move.w      #0, d1
00002184  343C 0000                243          move.w      #0, d2
00002188  363C 02BC                244          move.w      #700, d3
0000218C  383C 0032                245          move.w      #50, d4
00002190  7057                     246          move.l      #87, d0
00002192  4E4F                     247          trap        #15
00002194                           248  *------------------------------------------------------------*
00002194                           249  *------------------------------------------------------------*
00002194                           250  *--------------------Draw Health Bar-------------------------*
00002194                           251  *------------------------------------------------------------*
00002194                           252  *------------------------------------------------------------*       
00002194                           253  
00002194  4EB9 00002326            254          jsr     DrawPlayer1Health
0000219A                           255                 
0000219A                           256  *------------------------------------------------------------*
0000219A                           257  *------------------------------------------------------------*
0000219A                           258  *-------Draw the amount of health the player has-------------*
0000219A                           259  *------------------------------------------------------------*
0000219A                           260  *------------------------------------------------------------*
0000219A                           261          
0000219A  2039 00002470            262          move.l  RunnerHealth, d0
000021A0  4EB9 002EEBF4            263          jsr     updateHealth
000021A6  4EB9 002EEBF4            264          jsr     updateHealth
000021AC  4EB9 000022BE            265          jsr     drawPlayerCall
000021B2  4EB9 000022F2            266          jsr     drawEnemyCall
000021B8                           267          
000021B8                           268  *------------------------------------------------------------*
000021B8                           269  *------------------------------------------------------------*
000021B8                           270  *-----Check and see if the user presses the key to start-----*
000021B8                           271  *------------------------------------------------------------*
000021B8                           272  *------------------------------------------------------------*        
000021B8                           273  TitleLoop
000021B8  103C 0013                274          move.b          #GET_KEY_INPUT_COMMAND,d0
000021BC  7220                     275          move.l          #SPACE_KEY,d1
000021BE  4E4F                     276          TRAP            #15
000021C0  0C81 00000000            277          cmpi.l          #0, d1
000021C6  67F0                     278          BEQ             TitleLoop
000021C8                           279          
000021C8                           280          
000021C8                           281  *---------------------------------------------------------------------------------------------*
000021C8                           282  *---------------------------------------------------------------------------------------------*
000021C8                           283  *-------Pause the location 0 music  and move onto the location 1 music -----------------------*
000021C8                           284  *---------------------------------------------------------------------------------------------*
000021C8                           285  *---------------------------------------------------------------------------------------------*                
000021C8                           286  
000021C8  123C 0000                287          move.b  #0,d1 
000021CC  7402                     288          move.l  #2,d2
000021CE  704D                     289          move.l  #77,d0
000021D0  4E4F                     290          Trap    #15
000021D2                           291          
000021D2  123C 0001                292          move.b  #1, d1
000021D6  7401                     293          move.l  #1, d2
000021D8  704D                     294          move.l  #77, d0
000021DA  4E4F                     295          trap    #15
000021DC                           296          
000021DC                           297  *------------------------------------------------------------*
000021DC                           298  *------------------------------------------------------------*
000021DC                           299  *-------------Enable the double buffering--------------------*
000021DC                           300  *------------------------------------------------------------*
000021DC                           301  *------------------------------------------------------------* 
000021DC  103C 005E                302          move.b  #94, d0
000021E0  4E4F                     303          trap    #15
000021E2                           304  
000021E2                           305  *------------------------------------------------------------*
000021E2                           306  *------------------------------------------------------------*
000021E2                           307  *-------------Inisilise the main game loop-------------------*
000021E2                           308  *------------------------------------------------------------*
000021E2                           309  *------------------------------------------------------------* 
000021E2                           310  GAMELOOP:
000021E2  4EB9 00002344            311      jsr     updatePlayersBackgrounds
000021E8  4EB9 002EE930            312      jsr     initRunnerInput
000021EE  4EB9 002EED5E            313      jsr     updateRunnerGravity
000021F4  4EB9 000023E4            314      jsr     drawPlayers
000021FA  4EB9 000022B6            315      jsr     updateProjectilesBackgrounds
00002200  4EB9 002EEF6A            316      jsr     CheckProjectileCollision 
00002206                           317  
00002206                           318  
00002206                           319     
00002206                           320  *------------------------------------------------------------*
00002206                           321  *------------------------------------------------------------*
00002206                           322  *-------------Enable the double buffering--------------------*
00002206                           323  *------------------------------------------------------------*
00002206                           324  *------------------------------------------------------------*     
00002206  103C 005E                325      move.b  #94, d0                     
0000220A  4E4F                     326      trap    #15
0000220C                           327  
0000220C                           328  *---------------------------------------------------------------------------------------------*
0000220C                           329  *---------------------------------------------------------------------------------------------*
0000220C                           330  *-------------Check and see the players health if its at 0 print GAME OVER--------------------*
0000220C                           331  *---------------------------------------------------------------------------------------------*
0000220C                           332  *---------------------------------------------------------------------------------------------*     
0000220C                           333  
0000220C  2039 00002470            334      move.l  RunnerHealth, d0
00002212  0C80 00000001            335      cmpi.l  #1, d0
00002218                           336  
00002218                           337      
00002218  60C8                     338      bra     GAMELOOP                  
0000221A                           339      
0000221A                           340  *------------------------------------------------------------*
0000221A                           341  *------------------------------------------------------------*
0000221A                           342  *-------------Draw the game over banner----------------------*
0000221A                           343  *------------------------------------------------------------*
0000221A                           344  *------------------------------------------------------------*       
0000221A                           345  EnemyWINROUTINE  
0000221A                           346  
0000221A  4EB9 00002344            347      jsr     updatePlayersBackgrounds
00002220                           348      
00002220  4EB9 000022B6            349      jsr     updateProjectilesBackgrounds
00002226                           350      
00002226  41F9 002A8F8E            351      lea     GameOverBanner, a0
0000222C  223C 000002BC            352      move.l  #700, d1
00002232  7464                     353      move.l  #100, d2
00002234  7600                     354      move.l  #0, d3
00002236  283C 0000012C            355      move.l  #300, d4
0000223C  7A00                     356      move.l  #0, d5
0000223E  7C00                     357      move.l  #0, d6
00002240  4EB9 002EE8B8            358      jsr     DRAWIMAGE
00002246                           359      
00002246                           360  *------------------------------------------------------------*
00002246                           361  *------------------------------------------------------------*
00002246                           362  *-------------Draw where the runners dead pos is ------------*
00002246                           363  *------------------------------------------------------------*
00002246                           364  *------------------------------------------------------------* 
00002246                           365      
00002246  23FC 0000000A 00002458   366      move.l  #10, RunnerX
00002250  23FC 0000021C 0000245C   367      move.l  #540, RunnerY
0000225A  2039 0000245C            368      move.l  RunnerY, d0
00002260  E988                     369      lsl.l   #4, d0
00002262  23C0 0000245C            370      move.l  d0, RunnerY
00002268  23FC 000000A0 00002460   371      move.l  #160, RunnerChunkX
00002272  4EB9 000022BE            372      jsr DrawPlayerCall
00002278                           373      
00002278                           374  
00002278  4E4F                     375      Trap    #15
0000227A                           376    
0000227A                           377  *------------------------------------------------------------*
0000227A                           378  *------------------------------------------------------------*
0000227A                           379  *-------------Enable the double buffering--------------------*
0000227A                           380  *------------------------------------------------------------*
0000227A                           381  *------------------------------------------------------------*   
0000227A                           382  
0000227A  103C 005E                383      move.b  #94, d0
0000227E  4E4F                     384      trap    #15
00002280                           385      
00002280                           386  *-------------------------------------------------------------------------------*
00002280                           387  *-------------------------------------------------------------------------------*
00002280                           388  *-------------Stay on the game loop until user presses SPACE--------------------*
00002280                           389  *-------------------------------------------------------------------------------*
00002280                           390  *-------------------------------------------------------------------------------* 
00002280                           391  EnemyWINLOOP
00002280  103C 0013                392      move.b          #GET_KEY_INPUT_COMMAND,d0
00002284  7220                     393      move.l          #$20,d1
00002286  4E4F                     394      TRAP            #15
00002288  0C81 00000000            395      cmpi.l          #0, d1
0000228E  6600 FDCA                396      BNE             ResetBattleVariables
00002292  60EC                     397      BRA             EnemyWINLOOP
00002294                           398     
00002294                           399      
00002294                           400  *------------------------------------------------------------*
00002294                           401  *------------------------------------------------------------*
00002294                           402  *-------------Draw the dead runner image---------------------*
00002294                           403  *------------------------------------------------------------*
00002294                           404  *------------------------------------------------------------*     
00002294  41F9 002ED5E4            405      lea     DeadRunner, a0
0000229A  7232                     406      move.l  #50, d1
0000229C  741E                     407      move.l  #30, d2
0000229E  760A                     408      move.l  #10, d3
000022A0  283C 00000230            409      move.l  #560, d4
000022A6  7A00                     410      move.l  #0, d5
000022A8  7C00                     411      move.l  #0, d6
000022AA  4EB9 002EE8B8            412      jsr     DRAWIMAGE
000022B0                           413      
000022B0                           414  *------------------------------------------------------------*
000022B0                           415  *------------------------------------------------------------*
000022B0                           416  *-------------Enable the double buffering--------------------*
000022B0                           417  *------------------------------------------------------------*
000022B0                           418  *------------------------------------------------------------*     
000022B0  103C 005E                419      move.b  #94, d0
000022B4  4E4F                     420      trap    #15
000022B6                           421      
000022B6                           422  *------------------------------------------------------------*
000022B6                           423  *------------------------------------------------------------*
000022B6                           424  *-------------Update the projectiles background--------------*
000022B6                           425  *------------------------------------------------------------*
000022B6                           426  *------------------------------------------------------------*  
000022B6                           427  updateProjectilesBackgrounds
000022B6  4EB9 002EEEC8            428      jsr     updateProjectileBackGround
000022BC  4E75                     429      rts
000022BE                           430  
000022BE                           431  *------------------------------------------------------------*
000022BE                           432  *------------------------------------------------------------*
000022BE                           433  *----------------------SUBROUTINES---------------------------*
000022BE                           434  *------------------------------------------------------------*
000022BE                           435  *------------------------------------------------------------*     
000022BE                           436  
000022BE                           437  
000022BE                           438  *------------------------------------------------------------*
000022BE                           439  *------------------------------------------------------------*
000022BE                           440  *-------------Load in values for runner and enemy------------*
000022BE                           441  *------------------------------------------------------------*
000022BE                           442  *------------------------------------------------------------* 
000022BE                           443  DrawPlayerCall
000022BE  41F9 0027D932            444      lea     Runner, a0
000022C4  2239 00002450            445      move.l  RunnerWidth, d1
000022CA  2439 00002454            446      move.l  RunnerHeight, d2
000022D0  2639 00002458            447      move.l  RunnerX, d3
000022D6  2839 0000245C            448      move.l  RunnerY, d4 
000022DC  E84C                     449      lsr     #4, d4
000022DE  2A39 00002460            450      move.l  RunnerChunkX, d5
000022E4  2C39 00002464            451      move.l  RunnerChunkY, d6
000022EA  4EB9 002EE8B8            452      jsr     DRAWIMAGE
000022F0                           453      
000022F0  4E75                     454      rts   
000022F2                           455  DrawEnemyCall
000022F2  41F9 0028F668            456      lea     Enemy, a0
000022F8  2239 00002484            457      move.l  EnemyWidth, d1
000022FE  2439 00002488            458      move.l  EnemyHeight, d2
00002304  2639 0000248C            459      move.l  EnemyX, d3
0000230A  2839 00002490            460      move.l  EnemyY, d4
00002310  E84C                     461      lsr     #FRAC_BITS, d4
00002312  2A39 00002494            462      move.l  EnemyChunkX, d5
00002318  2C39 00002498            463      move.l  EnemyChunkY, d6
0000231E  4EB9 002EE8B8            464      jsr     DRAWIMAGE
00002324                           465      
00002324  4E75                     466      rts
00002326                           467      
00002326                           468  *------------------------------------------------------------*
00002326                           469  *------------------------------------------------------------*
00002326                           470  *-------------Draw the health bar for the runner-------------*
00002326                           471  *------------------------------------------------------------*
00002326                           472  *------------------------------------------------------------* 
00002326                           473  DrawPlayer1Health
00002326                           474  
00002326  41F9 002A139E            475       lea     RunnersHealth, a0
0000232C  223C 000000C8            476      move.l  #200, d1
00002332  7432                     477      move.l  #50, d2
00002334  7600                     478      move.l  #0, d3
00002336  7800                     479      move.l  #0, d4
00002338  7A00                     480      move.l  #0, d5
0000233A  7C00                     481      move.l  #0, d6
0000233C  4EB9 002EE8B8            482      jsr     DRAWIMAGE
00002342  4E75                     483      rts
00002344                           484  *------------------------------------------------------------*
00002344                           485  *------------------------------------------------------------*
00002344                           486  *--------Draw background for both runner and enemy-----------*
00002344                           487  *------------------------------------------------------------*
00002344                           488  *------------------------------------------------------------* 
00002344                           489  updatePlayersBackgrounds
00002344  41F9 00002514            490      lea     BackGround, a0
0000234A  2239 00002450            491      move.l  RunnerWidth, d1
00002350  2439 00002454            492      move.l  RunnerHeight, d2
00002356  2639 00002458            493      move.l  RunnerX, d3
0000235C  2839 0000245C            494      move.l  RunnerY, d4
00002362  E84C                     495      lsr     #FRAC_BITS, d4
00002364  2A39 00002458            496      move.l  RunnerX, d5
0000236A  2C39 0000245C            497      move.l  RunnerY, d6
00002370  E84E                     498      lsr     #FRAC_BITS, d6
00002372  4EB9 002EE8B8            499      jsr     DRAWIMAGE
00002378  41F9 00002514            500      lea     BackGround, a0
0000237E  2239 00002484            501      move.l  EnemyWidth, d1
00002384  2439 00002488            502      move.l  EnemyHeight, d2
0000238A  2639 0000248C            503      move.l  EnemyX, d3
00002390  2839 00002490            504      move.l  EnemyY, d4
00002396  E84C                     505      lsr     #FRAC_BITS, d4
00002398  2A39 0000248C            506      move.l  EnemyX, d5
0000239E  2C39 00002490            507      move.l  EnemyY, d6
000023A4  E84E                     508      lsr     #FRAC_BITS, d6
000023A6  4EB9 002EE8B8            509      jsr     DRAWIMAGE
000023AC  4E75                     510      rts
000023AE                           511      
000023AE                           512  *-*Draw over both score backgrounds
000023AE                           513  updateScoreBackGround
000023AE  7050                     514      move.l      #80, d0
000023B0  7200                     515      move.l      #$00000000, d1
000023B2  4E4F                     516      trap        #15
000023B4                           517      
000023B4  7051                     518      move.l      #81, d0
000023B6  7200                     519      move.l      #$00000000, d1
000023B8  4E4F                     520      trap        #15
000023BA                           521  
000023BA  323C 00CD                522      move.w      #205, d1
000023BE  343C 0005                523      move.w      #5, d2
000023C2  363C 00EB                524      move.w      #235, d3
000023C6  383C 0032                525      move.w      #50, d4
000023CA  7057                     526      move.l      #87, d0
000023CC  4E4F                     527      trap        #15
000023CE                           528      
000023CE  323C 01CC                529      move.w      #460, d1
000023D2  343C 0005                530      move.w      #5, d2
000023D6  363C 01EF                531      move.w      #495, d3
000023DA  383C 0032                532      move.w      #50, d4
000023DE  7057                     533      move.l      #87, d0
000023E0  4E4F                     534      trap        #15
000023E2                           535      
000023E2  4E75                     536      rts
000023E4                           537  
000023E4                           538  *------------------------------------------------------------*
000023E4                           539  *------------------------------------------------------------*
000023E4                           540  *-------------Draw both runner and enemy---------------------*
000023E4                           541  *------------------------------------------------------------*
000023E4                           542  *------------------------------------------------------------* 
000023E4                           543  drawPlayers 
000023E4                           544        
000023E4  41F9 0027D932            545      lea     Runner, a0
000023EA  2239 00002450            546      move.l  RunnerWidth, d1
000023F0  2439 00002454            547      move.l  RunnerHeight, d2
000023F6  2639 00002458            548      move.l  RunnerX, d3
000023FC  2839 0000245C            549      move.l  RunnerY, d4
00002402  E84C                     550      lsr     #FRAC_BITS, d4
00002404  2A39 00002460            551      move.l  RunnerChunkX, d5
0000240A  2C39 00002464            552      move.l  RunnerChunkY, d6
00002410  4EB9 002EE8B8            553      jsr     DRAWIMAGE
00002416                           554      
00002416  41F9 0028F668            555      lea     Enemy, a0
0000241C  2239 00002484            556      move.l  EnemyWidth, d1
00002422  2439 00002488            557      move.l  EnemyHeight, d2
00002428  2639 0000248C            558      move.l  EnemyX, d3
0000242E  2839 00002490            559      move.l  EnemyY, d4
00002434  E84C                     560      lsr     #FRAC_BITS, d4
00002436  2A39 00002494            561      move.l  EnemyChunkX, d5
0000243C  2C39 00002498            562      move.l  EnemyChunkY, d6
00002442  4EB9 002EE8B8            563      jsr     DRAWIMAGE
00002448                           564      
00002448  103C 005E                565      move.b  #94, d0
0000244C  4E4F                     566      trap    #15
0000244E                           567      
0000244E  4E75                     568      rts
00002450                           569      
00002450                           570  *------------------------------------------------------------*
00002450                           571  *------------------------------------------------------------*
00002450                           572  *-------------LIST OF VARIABLES AND CONSTANTS----------------*
00002450                           573  *------------------------------------------------------------*
00002450                           574  *------------------------------------------------------------* 
00002450                           575  
00002450                           576  RunnerWidth
00002450= 00000020                 577      dc.l   32
00002454                           578  RunnerHeight
00002454= 00000029                 579      dc.l   41 
00002458                           580  RunnerX
00002458= 0000000A                 581      dc.l   10
0000245C                           582  RunnerY
0000245C= 00000226                 583      dc.l    550
00002460                           584  RunnerChunkX
00002460= 000000A0                 585      dc.l    160
00002464                           586  RunnerChunkY
00002464= 00000000                 587      dc.l    0
00002468                           588  RunnerSpeed
00002468= 0000000A                 589      dc.l    10
0000246C                           590  RunnerJumping
0000246C= 00000000                 591      dc.l    0
00002470                           592  RunnerHealth
00002470= 00000008                 593      dc.l    8
00002474                           594  RunnerIdleSprite
00002474= 000000A0                 595      dc.l    160
00002478                           596  RunnerJumpSprite
00002478= 00000100                 597      dc.l    256 
0000247C                           598  RunnerDamageSprite
0000247C= 00000120                 599      dc.l    288 
00002480                           600  RunnerVelocity
00002480= 00000001                 601      dc.l    01
00002484                           602      
00002484                           603  *------------------------------------------------------------*
00002484                           604  *------------------------------------------------------------*
00002484                           605  *-------------ENEMY VARIABLES AND CONSTANTS------------------*
00002484                           606  *------------------------------------------------------------*
00002484                           607  *------------------------------------------------------------* 
00002484                           608  
00002484                           609  EnemyWidth
00002484= 00000020                 610      dc.l   32
00002488                           611  EnemyHeight
00002488= 0000002E                 612      dc.l    46 
0000248C                           613  EnemyX
0000248C= 0000027C                 614      dc.l    636
00002490                           615  EnemyY
00002490= 0000021C                 616      dc.l    540
00002494                           617  EnemyChunkX
00002494= 00000081                 618      dc.l    129
00002498                           619  EnemyChunkY
00002498= 00000000                 620      dc.l    0
0000249C                           621  EnemySpeed
0000249C= 0000000A                 622      dc.l    10
000024A0                           623  EnemyIdleSprite
000024A0= 00000081                 624      dc.l    129
000024A4                           625  EnemyVelocity
000024A4= 00000001                 626      dc.l    01 
000024A8                           627  EnemyProjectileActive
000024A8= 00000000                 628      dc.l    0
000024AC                           629  EnemyProjectileLeft
000024AC= 00000000                 630      dc.l    0
000024B0                           631  EnemyProjectileWidth
000024B0= 00000010                 632      dc.l    16
000024B4                           633  EnemyProjectileHeight
000024B4= 0000000C                 634      dc.l    12
000024B8                           635  EnemyProjectileX
000024B8= 000002BC                 636      dc.l    700
000024BC                           637  EnemyProjectileY
000024BC= 0000000A                 638      dc.l    10
000024C0                           639  EnemyProjectileYOffset
000024C0= 0000000A                 640      dc.l    10
000024C4                           641  EnemyProjectileChunkX
000024C4= 0000002A                 642      dc.l    42
000024C8                           643  EnemyProjectileChunkY
000024C8= 00000000                 644      dc.l    0
000024CC                           645  EnemyProjectileDamage
000024CC= 00000001                 646      dc.l    1
000024D0                           647  EnemyLeft
000024D0= 00000001                 648      dc.l    1
000024D4                           649  ProjectileSpeed
000024D4= 00000014                 650      dc.l    20
000024D8                           651  EnemyBeamSprite
000024D8= 000000E0                 652     dc.l    224
000024DC                           653  
000024DC                           654      
000024DC                           655  *------------------------------------------------------------*
000024DC                           656  *------------------------------------------------------------*
000024DC                           657  *-------------GAME VARIABLES AND CONSTANTS-------------------*
000024DC                           658  *------------------------------------------------------------*
000024DC                           659  *------------------------------------------------------------*     
000024DC                           660      
000024DC                           661  Ground
000024DC= 00000226                 662      dc.l    550    
000024E0                           663  RunnerScoreX
000024E0= 000000C8                 664      dc.l    200
000024E4                           665   
000024E4                           666      
000024E4                           667  *----------------------------------*
000024E4                           668  *----------------------------------*
000024E4                           669  *-------------MUSIC----------------*
000024E4                           670  *----------------------------------*
000024E4                           671  *----------------------------------*
000024E4                           672  TitleScreenMusic
000024E4= 5469746C 65736372 ...    673      dc.l    'Titlescreen.wav',0
000024F8                           674  GameMusic
000024F8= 496E6761 6D652E77 ...    675      dc.l    'Ingame.wav',0
00002508                           676  
00002508                           677  EnemyProjectileShot
00002508= 4869742E 77617600 ...    678      dc.l    'Hit.wav',0    
00002514                           679  *------------------------------------------------------------*
00002514                           680  *------------------------------------------------------------*
00002514                           681  *-------------IMAGES-----------------------------------------*
00002514                           682  *------------------------------------------------------------*
00002514                           683  *------------------------------------------------------------*   
00002514                           684  Background
00002514                           685      INCBIN "Game1.bmp"
00135F7E                           686  LoadingImage
00135F7E                           687      INCBIN "loadinggame.bmp"
00149EC8                           688  TitleScreen
00149EC8                           689      INCBIN "Titlesmall.bmp"
0027D932                           690    
0027D932                           691      
0027D932                           692      
0027D932                           693  Runner
0027D932                           694      INCBIN "updated.bmp"
0028F668                           695  Enemy
0028F668                           696      INCBIN "Enemy1.bmp"
002A139E                           697  RunnersHealth
002A139E                           698      INCBIN "RunnersHealth.bmp"
002A8904                           699      
002A8904                           700  BeamImage
002A8904                           701      INCBIN "projectilesprites.bmp"    
002A8F8E                           702      
002A8F8E                           703  GameOverBanner
002A8F8E                           704      INCBIN "Gameover.bmp"
002ED5E4                           705  DeadRunner
002ED5E4                           706      INCBIN "Deadrunner.bmp"  
002EE7EA                           707      
002EE7EA                           708  *------------------------------------------------------------*
002EE7EA                           709  *------------------------------------------------------------*
002EE7EA                           710  *-------------------INCLUDE OTHER FILES----------------------*
002EE7EA                           711  *------------------------------------------------------------*
002EE7EA                           712  *------------------------------------------------------------*
002EE7EA                           713   include "drawpixels.x68"  
002EE7EA                           714  
002EE7EA  =00000050                715  PenColorCode      EQU     80
002EE7EA  =00000052                716  DrawPixelCode     EQU     82
002EE7EA  =00000021                717  ScreenChangeCode  EQU     33
002EE7EA                           718  
002EE7EA                           719  
002EE7EA                           720  DrawChunk
002EE7EA                           721  ;reads in file information and user input
002EE7EA                           722  ;and sets the variables at the bottom and on stack
002EE7EA                           723  ;which will be used to draw the chunk of the bmp file
002EE7EA                           724  
002EE7EA  206F 0004                725          move.l  4(sp), a0               ;store the pointer to the image data into an address for access
002EE7EE  2028 000A                726          move.l  10(a0), d0              ;grab the offset from header to pixels
002EE7F2  E158                     727          rol.w   #8, d0                  ;rotate the word by 8 to move offset to appropriate position          
002EE7F4  4840                     728          swap    d0                      ;now swap the words of the offset for the next rotate
002EE7F6  E158                     729          rol.w   #8, d0                  ;finally rotate the words one time to make the true offset value readable
002EE7F8  D0C0                     730          add.w   d0, a0                  ;change position in memory to pixel data
002EE7FA                           731          
002EE7FA                           732  
002EE7FA                           733      
002EE7FA  4284                     734          clr.l   d4
002EE7FC  282F 0024                735          move.l  36(sp),d4
002EE800  2A2F 0014                736          move.l  20(sp), d5
002EE804  DAAF 000C                737          add.l   12(sp), d5
002EE808  9885                     738          sub.l   d5, d4
002EE80A  4285                     739          clr.l   d5
002EE80C  3A04                     740          move.w  d4, d5
002EE80E  4284                     741          clr.l   d4
002EE810                           742          
002EE810  282F 0020                743          move.l  32(sp), d4
002EE814                           744          
002EE814  CAC4                     745          mulu.w  d4, d5
002EE816                           746          
002EE816                           747  
002EE816  D1C5                     748          add.l   d5, a0
002EE818  D1C5                     749          add.l   d5, a0 
002EE81A  D1C5                     750          add.l   d5, a0       
002EE81C  262F 000C                751          move.l  12(sp), d3
002EE820                           752          
002EE820                           753          
002EE820                           754  OUTERLOOP
002EE820  3C3C 0000                755          move.w  #0, d6                  ;set or reset x counter for for loop
002EE824  282F 0010                756          move.l  16(sp), d4
002EE828  C8FC 0003                757          mulu.w  #3, d4
002EE82C  D0C4                     758          add.w   d4, a0                  ;add start of x to 0
002EE82E                           759          
002EE82E                           760  INNERLOOP
002EE82E  4284                     761          clr.l   d4                      ;make sure d4 has nothing in it
002EE830  1818                     762          move.b  (a0)+,d4                ;grab the first pixel
002EE832  4844                     763          swap.w  d4                      ;swap the pixel to change its position in memory for the rest of the pixel data
002EE834  4285                     764          clr.l   d5                      ;make sure d5 is also clear
002EE836  2A04                     765          move.l  d4, d5                  ;store previously found pixel data in d5 for next value
002EE838  4284                     766          clr.l   d4                      ;clear d4 for the next bit of memory
002EE83A  1818                     767          move.b  (a0)+, d4               ;grab next memory bit
002EE83C  E14C                     768          lsl     #8, d4                  ;shift left to get pixel in top of second word to combine with previous pixel bit
002EE83E  DA84                     769          add.l   d4, d5                  ;combine the data
002EE840  4284                     770          clr.l   d4                      ;clear d4 once again
002EE842  1818                     771          move.b  (a0)+, d4               ;get last bit needed
002EE844  DA84                     772          add.l   d4, d5                  ;combine it to the end of the previous two bits to get the pixel value
002EE846                           773          
002EE846                           774          
002EE846  4284                     775          clr.l   d4                      ;If pixel is pink, do not draw it
002EE848  1838 00FF                776          move.b  $FF, d4
002EE84C  4844                     777          swap    d4
002EE84E  1838 00FF                778          move.b  $FF, d4
002EE852                           779          
002EE852  BA44                     780          cmp     d4, d5
002EE854  6700 0006                781          BEQ     INCREMENT
002EE858                           782          
002EE858  6000 0044                783          BRA     DRAWPIXEL               ;pixel meets criteria and can be printed
002EE85C                           784  
002EE85C                           785  INCREMENT
002EE85C  4284                     786          clr.l   d4                      ;make sure d4 is empty for use  
002EE85E  5246                     787          add.w   #1,d6                   ;increment x counter by one
002EE860                           788          
002EE860                           789          *Check for end of X row
002EE860  282F 0010                790          move.l  16(sp), d4
002EE864  D886                     791          add.l   d6, d4
002EE866  2A2F 0020                792          move.l  32(sp), d5
002EE86A  B845                     793          cmp     d5, d4
002EE86C  6700 0022                794          BEQ     INCREMENTY
002EE870                           795        
002EE870  282F 0008                796          move.l  8(sp), d4               ;move width of image into register
002EE874  BC44                     797          cmp     d4, d6                  ;see if counter is beyond x bounds
002EE876  66B6                     798          BNE     INNERLOOP               ;if it is not, loop again
002EE878                           799          
002EE878                           800          ;skip after outside of box on x axis
002EE878  4284                     801          clr.l   d4
002EE87A  282F 0010                802          move.l  16(sp), d4
002EE87E  D8AF 0008                803          add.l   8(sp), d4
002EE882  4285                     804          clr.l   d5
002EE884  2A2F 0020                805          move.l  32(sp), d5
002EE888  9A84                     806          sub.l   d4, d5
002EE88A  CAFC 0003                807          mulu.w  #3, d5
002EE88E                           808          ;add offset to address
002EE88E  D1C5                     809          add.l   d5, a0
002EE890                           810          
002EE890                           811          
002EE890                           812  INCREMENTY        
002EE890                           813          ;take care of padding
002EE890  D1F9 002EE92C            814          add.l   Padding, a0             ;add padding.  If there is none, the address won't skip anything
002EE896                           815          
002EE896  5343                     816          sub.w   #1, d3                  ;decrement y counter to see if you are out of the y iteration
002EE898  6686                     817          BNE     OUTERLOOP               ;if it is not, loop back to outer loop
002EE89A  6000 001A                818          BRA     ENDROUTINE              ;branch to end of subroutine, whole image has been iterated
002EE89E                           819          
002EE89E                           820          
002EE89E                           821  DRAWPIXEL
002EE89E  2205                     822          move.l  d5, d1                  ;move pixel data into d1 for pen color
002EE8A0  7050                     823          move.l  #PenColorCode, d0       ;set trap code for setting the pen color
002EE8A2  4E4F                     824          trap    #15                     ;set pen color
002EE8A4                           825                           
002EE8A4  222F 0018                826          move.l   24(sp), d1             ;store the starting x position of the chunk
002EE8A8  D286                     827          add.l    d6, d1                 ;add iteration position of x to start of chunk
002EE8AA                           828          
002EE8AA  242F 001C                829          move.l  28(sp), d2              ;start at top of chunk to flip image
002EE8AE  D483                     830          add.l   d3, d2                  ;subtract current y position
002EE8B0  7052                     831          move.l  #DrawPixelCode, d0      ;Set trap code to draw pixel at position
002EE8B2  4E4F                     832          trap    #15                     ;draw pixel at position
002EE8B4                           833          
002EE8B4  60A6                     834          BRA     INCREMENT               ;increment position
002EE8B6                           835          
002EE8B6                           836          
002EE8B6                           837  ENDROUTINE
002EE8B6  4E75                     838          rts                             ;branch back to end of program
002EE8B8                           839  
002EE8B8                           840  
002EE8B8                           841  DRAWIMAGE
002EE8B8                           842          *Reset padding for multiple calls
002EE8B8  23FC 00000000 002EE92C   843          move.l  #0, Padding
002EE8C2                           844          
002EE8C2  7024                     845          move.l  #36, d0                 ;number of 7 4 byte arguments to prepare stack to receive
002EE8C4  9FC0                     846          sub.l   d0, sp                  ;prepare stack to receive arguments 
002EE8C6                           847          
002EE8C6  2E88                     848          move.l  a0, (sp)                ;load pointer to the .bmp file onto the stack
002EE8C8                           849          
002EE8C8                           850          ;store width of chunk on the stack
002EE8C8  2F41 0004                851          move.l  d1, 4(sp)
002EE8CC                           852          ;store height of the chunk on the stack 
002EE8CC  2F42 0008                853          move.l  d2, 8(sp)               
002EE8D0                           854          
002EE8D0                           855          ;add start of chunk to move with image
002EE8D0  2F45 000C                856          move.l   d5, 12(sp)             ;store Top left x of draw chunk on stack
002EE8D4                           857          
002EE8D4                           858          ;subtract y position from height to get start y
002EE8D4  2F46 0010                859          move.l  d6, 16(sp)              ;store Top left y of draw chunk on stack                      
002EE8D8                           860  
002EE8D8  2F43 0014                861          move.l  d3, 20(sp)              ;store Beginning print location for x axis on stack
002EE8DC  2F44 0018                862          move.l  d4, 24(sp)              ;store Beginning print location for y axis on stack
002EE8E0                           863          
002EE8E0  2228 0012                864          move.l  18(a0), d1              ;get width of image from .bmp file
002EE8E4  E159                     865          rol.w   #8, d1          
002EE8E6  4841                     866          swap    d1
002EE8E8  E159                     867          rol.w   #8, d1                  ;rotate and swap long word to get true width value to use later
002EE8EA  2F41 001C                868          move.l  d1, 28(sp)              ;store width of image to make variable not global
002EE8EE                           869  
002EE8EE                           870          
002EE8EE                           871          ;calculate for padding.  
002EE8EE                           872          ;This only concerns width
002EE8EE  7404                     873          move.l  #4, d2                  ;move 4 into register for padding calculation
002EE8F0  C2FC 0003                874          mulu.w  #3, d1                  ;multiply image width by 3 for formula
002EE8F4  82FC 0004                875          divu.w  #4, d1                  ;divide by four to find remainder
002EE8F8  4841                     876          swap    d1                      ;swap remainder into lower word
002EE8FA  4284                     877          clr.l   d4                      ;make sure d4 is empty
002EE8FC  383C 0000                878          move.w  #0, d4                  ;move 0 into d4 
002EE900  B841                     879          cmp.w   d1, d4                  ;if equal, there is no padding
002EE902  6700 000A                880          BEQ     RUNPROGRAM              ;continue in program for special case of being divisible by 4
002EE906                           881          
002EE906                           882          
002EE906                           883  ACCOUNTFORPADDING
002EE906  9441                     884          sub.w   d1, d2                  ;subtract remainder from 4 to get padding
002EE908  23C2 002EE92C            885          move.l  d2, Padding             ;store padding for later use
002EE90E                           886          
002EE90E                           887          
002EE90E                           888  RUNPROGRAM       
002EE90E  2428 0016                889          move.l  22(a0), d2              ;get height of image from .bmp file
002EE912  E15A                     890          rol.w   #8, d2          
002EE914  4842                     891          swap    d2
002EE916  E15A                     892          rol.w   #8, d2                  ;rotate and swap long word to get true height value to use later
002EE918  2F42 0020                893          move.l  d2, 32(sp)              ;store height of image to make variable not global
002EE91C                           894  
002EE91C  4EB9 002EE7EA            895          jsr     DrawChunk               ;call subroutine to draw chunk of image       
002EE922                           896         
002EE922  4280                     897          clr.l   d0
002EE924  7024                     898          move.l  #36, d0                
002EE926  DFC0                     899          add.l   d0, sp                  ;fix stack
002EE928                           900          
002EE928  4287                     901          clr.l   d7
002EE92A                           902          
002EE92A  4E75                     903          rts
002EE92C                           904  
002EE92C                           905  Padding
002EE92C= 00000000                 906          dc.l    0
002EE930                           907  
002EE930                           908  
002EE930                           909  
002EE930                           910  
002EE930                           911  
002EE930                           912  
002EE930                           913  
002EE930                           914  
002EE930                           915  
002EE930                           916  
002EE930                           917  
002EE930                           918  
002EE930                           919  
002EE930                           920  
002EE930                           921  
002EE930                           922  
002EE930                           923  
002EE930                           924  
002EE930                           925  
002EE930                           926  
002EE930                           927  
002EE930                           928  
002EE930                           929  
002EE930                           930  
002EE930                           931  
002EE930                           932  
002EE930                           933  
002EE930                           934  
002EE930                           935  
002EE930                           936  
002EE930                           937  
002EE930                           938  
002EE930                           939  
002EE930                           940  
002EE930                           941  
002EE930                           942  
002EE930                           943  
002EE930                           944  
002EE930                           945  
002EE930                           946  
002EE930                           947  -------------------- end include --------------------
002EE930                           948   include "playerinput.x68"
002EE930                           949  
002EE930                           950  
002EE930                           951  ALL_REG                 REG     D0-D7/A0-A6
002EE930  =00000013                952  GET_KEY_INPUT_COMMAND   equ     19        
002EE930                           953  
002EE930                           954  initRunnerInput
002EE930  7420                     955          move.l          #$20,d2
002EE932                           956          
002EE932                           957  inputLoop
002EE932  4280                     958          clr.l           d0   
002EE934  103C 0013                959          move.b          #GET_KEY_INPUT_COMMAND,d0
002EE938                           960          
002EE938  2202                     961          move.l          d2,d1
002EE93A  4E4F                     962          TRAP            #15
002EE93C                           963          
002EE93C  0C01 0000                964          cmpi.b          #0,d1
002EE940  6700 0008                965          beq             noCall
002EE944  4EB9 002EE968            966          jsr             callFunction
002EE94A                           967  
002EE94A                           968  noCall
002EE94A  5282                     969          add.l           #1,d2          
002EE94C                           970  
002EE94C                           971  
002EE94C  0C02 005A                972          cmpi.b          #$5A,d2
002EE950  66E0                     973          bne             inputLoop
002EE952  23FC 00000000 002EEBEC   974          move.l          #0, RunnerBeamPressed
002EE95C  23FC 00000000 002EEBF0   975          move.l          #0,  EnemyBeamPressed
002EE966  4E75                     976          rts
002EE968                           977  
002EE968                           978  callFunction
002EE968  48E7 FFFE                979          movem.l ALL_REG,-(sp)
002EE96C                           980          
002EE96C  41F9 002EEB50            981          lea     FunctionTable,a0
002EE972  0482 00000020            982          sub.l   #$20,d2
002EE978  E58A                     983          lsl.l   #2,d2
002EE97A  2230 2000                984          move.l  (a0,d2),d1
002EE97E                           985          
002EE97E  0C81 00000000            986          cmpi.l  #0,d1
002EE984  6700 0006                987          beq     noFuncPtr
002EE988                           988  
002EE988  2241                     989          move.l  d1,a1
002EE98A  4E91                     990          jsr     (a1)  
002EE98C                           991          
002EE98C                           992  
002EE98C                           993  noFuncPtr
002EE98C  4CDF 7FFF                994          movem.l (sp)+,ALL_REG
002EE990  4E75                     995          rts
002EE992                           996  
002EE992                           997  spaceRoutine
002EE992  48E7 FFFE                998          movem.l ALL_REG,-(sp)   
002EE996  4CDF 7FFF                999          movem.l (sp)+,ALL_REG
002EE99A                          1000  
002EE99A  203C 00000226           1001          move.l  #550, d0
002EE9A0  2238 245C               1002          move.l  RunnerY, d1
002EE9A4  E849                    1003          lsr     #FRAC_BITS, d1
002EE9A6  B280                    1004          cmp.l   d0,d1
002EE9A8  6600 0002               1005          BNE     jumpLoop
002EE9AC                          1006         
002EE9AC                          1007  jumpLoop
002EE9AC  21FC 00000000 2480      1008          move.l  #0, RunnerVelocity
002EE9B4  2838 245C               1009          move.l  RunnerY, d4
002EE9B8  7A32                    1010          move.l  #50, d5
002EE9BA  E94D                    1011          lsl     #FRAC_BITS, d5
002EE9BC  2C38 245C               1012          move.l  RunnerY, d6
002EE9C0  2638 2468               1013          move.l  RunnerSpeed, d3
002EE9C4  E94B                    1014          lsl     #FRAC_BITS, d3
002EE9C6  9C83                    1015          sub.l   d3, d6
002EE9C8  BC45                    1016          cmp     d5, d6
002EE9CA  6D00 0016               1017          BLT     spaceRoutineExit
002EE9CE                          1018          
002EE9CE  21F8 2478 2460          1019          move.l  RunnerJumpSprite, RunnerChunkX
002EE9D4  9883                    1020          sub.l   d3, d4
002EE9D6  21C4 245C               1021          move.l  d4, RunnerY
002EE9DA  21FC 00000001 246C      1022          move.l  #1, RunnerJumping
002EE9E2                          1023          
002EE9E2                          1024  spaceRoutineExit
002EE9E2  4E75                    1025          rts
002EE9E4                          1026          
002EE9E4                          1027  routine0
002EE9E4  48E7 FFFE               1028          movem.l ALL_REG,-(sp)   
002EE9E8  4CDF 7FFF               1029          movem.l (sp)+,ALL_REG
002EE9EC  4E75                    1030          rts
002EE9EE                          1031  routine1
002EE9EE  48E7 FFFE               1032          movem.l ALL_REG,-(sp)   
002EE9F2  4CDF 7FFF               1033          movem.l (sp)+,ALL_REG
002EE9F6  4E75                    1034          rts     
002EE9F8                          1035  routine2
002EE9F8  48E7 FFFE               1036          movem.l ALL_REG,-(sp)   
002EE9FC  4CDF 7FFF               1037          movem.l (sp)+,ALL_REG
002EEA00  4E75                    1038          rts     
002EEA02                          1039  routine3
002EEA02  48E7 FFFE               1040          movem.l ALL_REG,-(sp)   
002EEA06  4CDF 7FFF               1041          movem.l (sp)+,ALL_REG
002EEA0A  4E75                    1042          rts     
002EEA0C                          1043  routine4
002EEA0C  48E7 FFFE               1044          movem.l ALL_REG,-(sp)   
002EEA10  4CDF 7FFF               1045          movem.l (sp)+,ALL_REG
002EEA14  4E75                    1046          rts     
002EEA16                          1047  routine5
002EEA16  48E7 FFFE               1048          movem.l ALL_REG,-(sp)   
002EEA1A  4CDF 7FFF               1049          movem.l (sp)+,ALL_REG
002EEA1E  4E75                    1050          rts
002EEA20                          1051  routine6
002EEA20  48E7 FFFE               1052          movem.l ALL_REG,-(sp)   
002EEA24  4CDF 7FFF               1053          movem.l (sp)+,ALL_REG
002EEA28  4E75                    1054          rts
002EEA2A                          1055  routine7
002EEA2A  48E7 FFFE               1056          movem.l ALL_REG,-(sp)   
002EEA2E  4CDF 7FFF               1057          movem.l (sp)+,ALL_REG
002EEA32  4E75                    1058          rts
002EEA34                          1059  routine8
002EEA34  48E7 FFFE               1060          movem.l ALL_REG,-(sp)   
002EEA38  4CDF 7FFF               1061          movem.l (sp)+,ALL_REG
002EEA3C  4E75                    1062          rts
002EEA3E                          1063  routine9
002EEA3E  48E7 FFFE               1064          movem.l ALL_REG,-(sp)   
002EEA42  4CDF 7FFF               1065          movem.l (sp)+,ALL_REG
002EEA46  4E75                    1066          rts
002EEA48                          1067  routineE
002EEA48  48E7 FFFE               1068          movem.l ALL_REG,-(sp)   
002EEA4C  4CDF 7FFF               1069          movem.l (sp)+,ALL_REG
002EEA50  4E75                    1070          rts
002EEA52                          1071  routineF
002EEA52  48E7 FFFE               1072          movem.l ALL_REG,-(sp)   
002EEA56  4CDF 7FFF               1073          movem.l (sp)+,ALL_REG
002EEA5A  4E75                    1074          rts
002EEA5C                          1075  routineG
002EEA5C  48E7 FFFE               1076          movem.l ALL_REG,-(sp)   
002EEA60  4CDF 7FFF               1077          movem.l (sp)+,ALL_REG
002EEA64  4E75                    1078          rts
002EEA66                          1079  routineH
002EEA66  48E7 FFFE               1080          movem.l ALL_REG,-(sp)   
002EEA6A  4CDF 7FFF               1081          movem.l (sp)+,ALL_REG
002EEA6E  4E75                    1082          rts
002EEA70                          1083  routineI
002EEA70  48E7 FFFE               1084          movem.l ALL_REG,-(sp)   
002EEA74  4CDF 7FFF               1085          movem.l (sp)+,ALL_REG
002EEA78  4E75                    1086          rts
002EEA7A                          1087  routineJ
002EEA7A  48E7 FFFE               1088          movem.l ALL_REG,-(sp)   
002EEA7E  4CDF 7FFF               1089          movem.l (sp)+,ALL_REG
002EEA82  4E75                    1090          rts
002EEA84                          1091  routineK
002EEA84  48E7 FFFE               1092          movem.l ALL_REG,-(sp)   
002EEA88  4CDF 7FFF               1093          movem.l (sp)+,ALL_REG
002EEA8C  4E75                    1094          rts
002EEA8E                          1095  
002EEA8E                          1096  routineL
002EEA8E  48E7 FFFE               1097          movem.l ALL_REG,-(sp)   
002EEA92  4CDF 7FFF               1098          movem.l (sp)+,ALL_REG
002EEA96  4E75                    1099          rts
002EEA98                          1100  
002EEA98                          1101  routineM
002EEA98  48E7 FFFE               1102          movem.l ALL_REG,-(sp)   
002EEA9C  4CDF 7FFF               1103          movem.l (sp)+,ALL_REG
002EEAA0  4E75                    1104          rts
002EEAA2                          1105  
002EEAA2                          1106  routineN
002EEAA2  48E7 FFFE               1107          movem.l ALL_REG,-(sp)   
002EEAA6  4CDF 7FFF               1108          movem.l (sp)+,ALL_REG
002EEAAA  4E75                    1109          rts
002EEAAC                          1110  
002EEAAC                          1111  routineO
002EEAAC                          1112          
002EEAAC  48E7 FFFE               1113          movem.l ALL_REG,-(sp)   
002EEAB0  4CDF 7FFF               1114          movem.l (sp)+,ALL_REG
002EEAB4                          1115          *check boolean of button pressed and projectile active
002EEAB4  2039 002EEBF0           1116          move.l  EnemyBeamPressed, d0
002EEABA  0C80 00000000           1117          cmpi.l  #0, d0
002EEAC0  6600 0026               1118          BNE     routineOExit
002EEAC4                          1119          
002EEAC4  23FC 00000001 002EEBF0  1120          move.l  #1, EnemyBeamPressed
002EEACE                          1121          
002EEACE  2038 24A8               1122          move.l  EnemyProjectileActive, d0
002EEAD2  0C80 00000000           1123          cmpi.l  #0, d0
002EEAD8  6600 000E               1124          BNE     routineOExit
002EEADC                          1125          *update sprite
002EEADC  21F8 24D8 2494          1126          move.l  EnemyBeamSprite, EnemyChunkX
002EEAE2                          1127          
002EEAE2  4EB9 002EEE50           1128          jsr     spawnEnemyProjectile
002EEAE8                          1129          
002EEAE8                          1130  
002EEAE8                          1131          
002EEAE8                          1132  routineOExit
002EEAE8  4E75                    1133          rts
002EEAEA                          1134  
002EEAEA                          1135  routineP
002EEAEA  48E7 FFFE               1136          movem.l ALL_REG,-(sp)   
002EEAEE  4CDF 7FFF               1137          movem.l (sp)+,ALL_REG
002EEAF2  4E75                    1138          rts
002EEAF4                          1139  
002EEAF4                          1140  routineQ
002EEAF4  48E7 FFFE               1141          movem.l ALL_REG,-(sp)   
002EEAF8  4CDF 7FFF               1142          movem.l (sp)+,ALL_REG
002EEAFC  4E75                    1143          rts
002EEAFE                          1144  
002EEAFE                          1145  routineR
002EEAFE  48E7 FFFE               1146          movem.l ALL_REG,-(sp)   
002EEB02  4CDF 7FFF               1147          movem.l (sp)+,ALL_REG
002EEB06  4E75                    1148          rts
002EEB08                          1149  
002EEB08                          1150  routineS
002EEB08  48E7 FFFE               1151          movem.l ALL_REG,-(sp)   
002EEB0C  4CDF 7FFF               1152          movem.l (sp)+,ALL_REG
002EEB10  4E75                    1153          rts
002EEB12                          1154  
002EEB12                          1155  routineT
002EEB12  48E7 FFFE               1156          movem.l ALL_REG,-(sp)   
002EEB16  4CDF 7FFF               1157          movem.l (sp)+,ALL_REG
002EEB1A  4E75                    1158          rts
002EEB1C                          1159  
002EEB1C                          1160  routineU
002EEB1C  48E7 FFFE               1161          movem.l ALL_REG,-(sp)   
002EEB20  4CDF 7FFF               1162          movem.l (sp)+,ALL_REG
002EEB24  4E75                    1163          rts
002EEB26                          1164  
002EEB26                          1165  routineV
002EEB26                          1166  
002EEB26  48E7 FFFE               1167          movem.l ALL_REG,-(sp)   
002EEB2A  4CDF 7FFF               1168          movem.l (sp)+,ALL_REG
002EEB2E  4E75                    1169          rts
002EEB30                          1170          
002EEB30                          1171  routineWExit
002EEB30  4E75                    1172          rts
002EEB32                          1173  
002EEB32                          1174  routineX
002EEB32  48E7 FFFE               1175          movem.l ALL_REG,-(sp)   
002EEB36  4CDF 7FFF               1176          movem.l (sp)+,ALL_REG
002EEB3A  4E75                    1177          rts
002EEB3C                          1178  
002EEB3C                          1179  routineY
002EEB3C  48E7 FFFE               1180          movem.l ALL_REG,-(sp)   
002EEB40  4CDF 7FFF               1181          movem.l (sp)+,ALL_REG
002EEB44  4E75                    1182          rts
002EEB46                          1183  
002EEB46                          1184  routineZ
002EEB46  48E7 FFFE               1185          movem.l ALL_REG,-(sp)   
002EEB4A  4CDF 7FFF               1186          movem.l (sp)+,ALL_REG
002EEB4E  4E75                    1187          rts
002EEB50                          1188          
002EEB50                          1189  
002EEB50                          1190  
002EEB50                          1191  FunctionTable   
002EEB50                          1192                  *spacebar routine
002EEB50= 002EE992                1193                  dc.l    spaceRoutine
002EEB54= 00000000 00000000 ...   1194                  dc.l    0,0,0,0,0,0,0
002EEB70= 002EE9E4 002EE9EE ...   1195                  dc.l    routine0,routine1,routine2,routine3,routine4,routine5,routine6,routine7,routine8,routine9
002EEB98= 00000000 00000000 ...   1196                  dc.l    0,0,0,0,0,0,0
002EEBB4= 002EEA66 002EEA70 ...   1197                  dc.l    routineH,routineI,routineJ,routineK,routineL,routineM,routineN
002EEBD0= 002EEAAC 002EEAEA ...   1198                  dc.l    routineO,routineP,routineQ,routineR,routineS,routineT,routineU
002EEBEC                          1199  
002EEBEC                          1200  
002EEBEC                          1201  
002EEBEC                          1202  
002EEBEC                          1203  RunnerBeamPressed
002EEBEC= 00000000                1204          dc.l    0
002EEBF0                          1205  EnemyBeamPressed
002EEBF0= 00000000                1206          dc.l    0        
002EEBF4                          1207  
002EEBF4                          1208  
002EEBF4                          1209  
002EEBF4                          1210  
002EEBF4                          1211  
002EEBF4                          1212  
002EEBF4                          1213  
002EEBF4                          1214  
002EEBF4                          1215  
002EEBF4                          1216  
002EEBF4                          1217  
002EEBF4                          1218  
002EEBF4                          1219  
002EEBF4                          1220  
002EEBF4                          1221  
002EEBF4                          1222  
002EEBF4                          1223  
002EEBF4                          1224  
002EEBF4                          1225  
002EEBF4                          1226  
002EEBF4                          1227  
002EEBF4                          1228  
002EEBF4                          1229  
002EEBF4                          1230  
002EEBF4                          1231  
002EEBF4                          1232  
002EEBF4                          1233  
002EEBF4                          1234  
002EEBF4                          1235  
002EEBF4                          1236  
002EEBF4                          1237  
002EEBF4                          1238  
002EEBF4                          1239  
002EEBF4                          1240  
002EEBF4                          1241  
002EEBF4                          1242  
002EEBF4                          1243  
002EEBF4                          1244  
002EEBF4                          1245  
002EEBF4                          1246  
002EEBF4                          1247  
002EEBF4                          1248  
002EEBF4                          1249  
002EEBF4                          1250  
002EEBF4                          1251  
002EEBF4                          1252  
002EEBF4                          1253  
002EEBF4                          1254  
002EEBF4                          1255  
002EEBF4                          1256  
002EEBF4                          1257  
002EEBF4                          1258  
002EEBF4                          1259  
002EEBF4                          1260  
002EEBF4                          1261  
002EEBF4                          1262  
002EEBF4                          1263  -------------------- end include --------------------
002EEBF4                          1264   include "healthdisplay.x68"
002EEBF4                          1265  
002EEBF4                          1266  
002EEBF4                          1267  
002EEBF4                          1268  updateHealth
002EEBF4                          1269      *get the position of the current health based on the player health passed in
002EEBF4  207C 002EED36           1270      move.l      #zeroDigit, a0
002EEBFA                          1271      *multiply digit by 4 to get correct hex number at the end of the file
002EEBFA  E588                    1272      lsl.l       #2, d0
002EEBFC  D1C0                    1273      add.l       d0, a0    
002EEBFE                          1274      *store the current hex value of health
002EEBFE  2C10                    1275      move.l      (a0), d6
002EEC00                          1276      
002EEC00                          1277      *Change pen to white for each segment
002EEC00  7050                    1278      move.l      #80, d0
002EEC02  223C 00FFFFFF           1279      move.l      #$00FFFFFF, d1
002EEC08  4E4F                    1280      trap        #15
002EEC0A                          1281      
002EEC0A  7051                    1282      move.l      #81, d0
002EEC0C  223C 00FFFFFF           1283      move.l      #$00FFFFFF, d1
002EEC12  4E4F                    1284      trap        #15
002EEC14                          1285  
002EEC14                          1286  
002EEC14                          1287  GDigitRoutine
002EEC14  2206                    1288      move.l      d6, d1     
002EEC16  C2BC 00000001           1289      AND.l       #1, d1
002EEC1C  6700 001C               1290      BEQ         FDigitRoutine
002EEC20  323C 0005               1291      move.w      #5, d1
002EEC24  D285                    1292      add.l       d5, d1
002EEC26  343C 0014               1293      move.w      #20, d2
002EEC2A  363C 0023               1294      move.w      #35, d3
002EEC2E  D685                    1295      add.l       d5, d3
002EEC30  383C 001E               1296      move.w      #30, d4
002EEC34  4EB9 002EED2E           1297      jsr         DrawDigitPosition
002EEC3A                          1298  FDigitRoutine
002EEC3A  E88E                    1299      lsr.l         #4, d6
002EEC3C  2206                    1300      move.l      d6, d1
002EEC3E  C2BC 00000001           1301      AND.l       #1, d1
002EEC44  6700 001C               1302      BEQ         EDigitRoutine
002EEC48  323C 0005               1303      move.w      #5, d1
002EEC4C  D285                    1304      add.l       d5, d1
002EEC4E  343C 0005               1305      move.w      #5, d2
002EEC52  363C 000F               1306      move.w      #15, d3
002EEC56  D685                    1307      add.l       d5, d3
002EEC58  383C 0019               1308      move.w      #25, d4
002EEC5C  4EB9 002EED2E           1309      jsr         DrawDigitPosition
002EEC62                          1310  EDigitRoutine
002EEC62  E88E                    1311      lsr.l         #4, d6
002EEC64  2206                    1312      move.l      d6, d1
002EEC66  C2BC 00000001           1313      AND.l       #1, d1
002EEC6C  6700 001C               1314      BEQ         DDigitRoutine
002EEC70  323C 0005               1315      move.w      #5, d1
002EEC74  D285                    1316      add.l       d5, d1
002EEC76  343C 0019               1317      move.w      #25, d2
002EEC7A  363C 000F               1318      move.w      #15, d3
002EEC7E  D685                    1319      add.l       d5, d3
002EEC80  383C 002D               1320      move.w      #45, d4
002EEC84  4EB9 002EED2E           1321      jsr         DrawDigitPosition
002EEC8A                          1322  DDigitRoutine
002EEC8A  E88E                    1323      lsr.l         #4, d6
002EEC8C  2206                    1324      move.l      d6, d1
002EEC8E  C2BC 00000001           1325      AND.l       #1, d1
002EEC94  6700 001C               1326      BEQ         CDigitRoutine
002EEC98  323C 0005               1327      move.w      #5, d1
002EEC9C  D285                    1328      add.l       d5, d1
002EEC9E  343C 0023               1329      move.w      #35, d2
002EECA2  363C 0023               1330      move.w      #35, d3
002EECA6  D685                    1331      add.l       d5, d3
002EECA8  383C 002D               1332      move.w      #45, d4
002EECAC  4EB9 002EED2E           1333      jsr         DrawDigitPosition
002EECB2                          1334  CDigitRoutine
002EECB2  E88E                    1335      lsr.l         #4, d6
002EECB4  2206                    1336      move.l      d6, d1
002EECB6  C2BC 00000001           1337      AND.l       #1, d1
002EECBC  6700 001C               1338      BEQ         BDigitRoutine
002EECC0  323C 0019               1339      move.w      #25, d1
002EECC4  D285                    1340      add.l       d5, d1
002EECC6  343C 0019               1341      move.w      #25, d2
002EECCA  363C 0023               1342      move.w      #35, d3
002EECCE  D685                    1343      add.l       d5, d3
002EECD0  383C 002D               1344      move.w      #45, d4
002EECD4  4EB9 002EED2E           1345      jsr         DrawDigitPosition
002EECDA                          1346  BDigitRoutine
002EECDA  E88E                    1347      lsr.l         #4, d6
002EECDC  2206                    1348      move.l      d6, d1
002EECDE  C2BC 00000001           1349      AND.l       #1, d1
002EECE4  6700 001C               1350      BEQ         ADigitRoutine
002EECE8  323C 0019               1351      move.w      #25, d1
002EECEC  D285                    1352      add.l       d5, d1
002EECEE  343C 0005               1353      move.w      #5, d2
002EECF2  363C 0023               1354      move.w      #35, d3
002EECF6  D685                    1355      add.l       d5, d3
002EECF8  383C 0019               1356      move.w      #25, d4
002EECFC  4EB9 002EED2E           1357      jsr         DrawDigitPosition
002EED02                          1358  ADigitRoutine
002EED02  E88E                    1359      lsr.l         #4, d6
002EED04  2206                    1360      move.l      d6, d1
002EED06  C2BC 00000001           1361      AND.l       #1, d1
002EED0C  6700 0026               1362      BEQ         FinishHealth
002EED10  323C 0005               1363      move.w      #5, d1
002EED14  D285                    1364      add.l       d5, d1
002EED16  343C 0005               1365      move.w      #5, d2
002EED1A  363C 0023               1366      move.w      #35, d3
002EED1E  D685                    1367      add.l       d5, d3
002EED20  383C 000F               1368      move.w      #15, d4
002EED24  4EB9 002EED2E           1369      jsr         DrawDigitPosition
002EED2A                          1370      
002EED2A  6000 0008               1371      BRA         FinishHealth
002EED2E                          1372  
002EED2E                          1373  
002EED2E                          1374  DrawDigitPosition
002EED2E  7057                    1375      move.l      #87, d0
002EED30  4E4F                    1376      trap        #15
002EED32  4E75                    1377      rts
002EED34                          1378  
002EED34                          1379  FinishHealth
002EED34  4E75                    1380      rts
002EED36                          1381  
002EED36                          1382  
002EED36                          1383  zeroDigit   
002EED36= 01111110                1384      dc.l    $01111110
002EED3A                          1385  oneDigit    
002EED3A= 00110000                1386      dc.l    $00110000
002EED3E                          1387  twoDigit    
002EED3E= 01101101                1388      dc.l    $01101101
002EED42                          1389  threeDigit  
002EED42= 01111001                1390      dc.l    $01111001
002EED46                          1391  fourDigit   
002EED46= 00110011                1392      dc.l    $00110011
002EED4A                          1393  fiveDigit       
002EED4A= 01011011                1394      dc.l    $01011011
002EED4E                          1395  sixDigit    
002EED4E= 01011111                1396      dc.l    $01011111
002EED52                          1397  sevenDigit  
002EED52= 01110000                1398      dc.l    $01110000
002EED56                          1399  eightDigit  
002EED56= 01111111                1400      dc.l    $01111111
002EED5A                          1401  nineDigit   
002EED5A= 01111011                1402      dc.l    $01111011
002EED5E                          1403  
002EED5E                          1404  
002EED5E                          1405  
002EED5E                          1406  
002EED5E                          1407  
002EED5E                          1408  
002EED5E                          1409  
002EED5E                          1410  
002EED5E                          1411  
002EED5E                          1412  
002EED5E                          1413  
002EED5E                          1414  -------------------- end include --------------------
002EED5E                          1415   include "gravityroutines.x68"
002EED5E                          1416  
002EED5E                          1417  updateRunnerGravity
002EED5E  4EB9 002EED72           1418          jsr     RunnerGravityRoutine
002EED64  4EB9 002EEDD0           1419          jsr     checkForRunnerGround
002EED6A  4EB9 002EEE0C           1420          jsr     checkForEnemyGround
002EED70  4E75                    1421          rts
002EED72                          1422  
002EED72                          1423  RunnerGravityRoutine
002EED72  103C 0013               1424          move.b          #GET_KEY_INPUT_COMMAND,d0
002EED76  7220                    1425          move.l          #SPACE_KEY,d1
002EED78  4E4F                    1426          TRAP            #15
002EED7A  0C01 0000               1427          cmpi.b          #0,d1
002EED7E  6600 008A               1428          bne             exitGravity
002EED82  2A38 246C               1429          move.l          RunnerJumping, d5
002EED86  0C85 00000001           1430          cmpi.l          #1, d5
002EED8C  103C 0013               1431          move.b          #GET_KEY_INPUT_COMMAND,d0
002EED90  7241                    1432          move.l          #$41,d1
002EED92  4E4F                    1433          TRAP            #15
002EED94  0C01 0000               1434          cmpi.b          #0,d1
002EED98  6600 0018               1435          bne             applyRunnerGravity
002EED9C                          1436          
002EED9C  103C 0013               1437          move.b          #GET_KEY_INPUT_COMMAND,d0
002EEDA0  7244                    1438          move.l          #$44,d1
002EEDA2  4E4F                    1439          TRAP            #15
002EEDA4  0C01 0000               1440          cmpi.b          #0,d1
002EEDA8  6600 0008               1441          bne             applyRunnerGravity
002EEDAC                          1442          
002EEDAC  21F8 2478 2460          1443          move.l          RunnerJumpSprite, RunnerChunkX
002EEDB2                          1444  
002EEDB2                          1445  applyRunnerGravity
002EEDB2  2038 2480               1446          move.l          RunnerVelocity, d0
002EEDB6  223C 0000009C           1447          move.l          #Gravity, d1
002EEDBC  D081                    1448          add.l           d1, d0
002EEDBE  21C0 2480               1449          move.l          d0, RunnerVelocity        
002EEDC2  2838 245C               1450          move.l          RunnerY, d4
002EEDC6  D8B8 2480               1451          add.l           RunnerVelocity, d4
002EEDCA  21C4 245C               1452          move.l          d4, RunnerY
002EEDCE  4E75                    1453          rts
002EEDD0                          1454  checkForRunnerGround
002EEDD0                          1455  
002EEDD0  2838 245C               1456      move.l  RunnerY, d4
002EEDD4  D8B8 2480               1457      add.l   RunnerVelocity, d4
002EEDD8                          1458  
002EEDD8  E84C                    1459      lsr     #FRAC_BITS, d4
002EEDDA  2A38 24DC               1460      move.l  Ground, d5
002EEDDE  B845                    1461      cmp     d5, d4
002EEDE0  6E00 0004               1462      BGT     setRunnerGround     
002EEDE4                          1463      
002EEDE4                          1464  returnRunnerGround    
002EEDE4  4E75                    1465      rts
002EEDE6                          1466  
002EEDE6                          1467  setRunnerGround
002EEDE6  21FC 00000000 2480      1468      move.l  #0, RunnerVelocity
002EEDEE  21F8 2474 2460          1469      move.l  RunnerIdleSprite, RunnerChunkX
002EEDF4  4EB8 2344               1470      jsr     updatePlayersBackGrounds
002EEDF8  2838 24DC               1471      move.l  Ground, d4
002EEDFC  E94C                    1472      lsl     #FRAC_BITS, d4
002EEDFE  21C4 245C               1473      move.l  d4, RunnerY
002EEE02  21FC 00000000 246C      1474      move.l  #0, RunnerJumping       
002EEE0A                          1475          
002EEE0A                          1476  
002EEE0A                          1477  exitGravity
002EEE0A  4E75                    1478          rts
002EEE0C                          1479  
002EEE0C                          1480  checkForEnemyGround
002EEE0C  2838 2490               1481      move.l  EnemyY, d4
002EEE10  D8B8 24A4               1482      add.l   EnemyVelocity, d4
002EEE14  E84C                    1483      lsr     #FRAC_BITS, d4
002EEE16  2A38 24DC               1484      move.l  Ground, d5
002EEE1A                          1485  
002EEE1A  5B85                    1486      sub.l   #5, d5
002EEE1C  B845                    1487      cmp     d5, d4
002EEE1E  6E00 0004               1488      BGT     setEnemyGround     
002EEE22                          1489  
002EEE22                          1490  returnEnemyGround    
002EEE22  4E75                    1491      rts
002EEE24                          1492      
002EEE24                          1493  setEnemyGround
002EEE24  21FC 00000000 24A4      1494      move.l  #0, EnemyVelocity
002EEE2C  21F8 24A0 2494          1495      move.l  EnemyIdleSprite, EnemyChunkX
002EEE32  4EB8 2344               1496      jsr     updatePlayersBackGrounds
002EEE36  2838 24DC               1497      move.l  Ground, d4
002EEE3A  0484 0000000A           1498      sub.l   #10, d4
002EEE40  E94C                    1499      lsl     #FRAC_BITS, d4
002EEE42  21C4 2490               1500      move.l  d4, EnemyY
002EEE46                          1501  
002EEE46                          1502      
002EEE46                          1503  
002EEE46  7200                    1504      move.l  #0,d1
002EEE48  7400                    1505      move.l  #0,d2
002EEE4A  7049                    1506      move.l  #73,d0
002EEE4C  4E4F                    1507      Trap    #15
002EEE4E                          1508      
002EEE4E  60D2                    1509      bra     returnEnemyGround
002EEE50                          1510  
002EEE50                          1511  
002EEE50                          1512  
002EEE50                          1513  
002EEE50                          1514  
002EEE50                          1515  
002EEE50                          1516  
002EEE50                          1517  
002EEE50                          1518  
002EEE50                          1519  
002EEE50                          1520  
002EEE50                          1521  
002EEE50                          1522  
002EEE50                          1523  
002EEE50                          1524  
002EEE50                          1525  
002EEE50                          1526  
002EEE50                          1527  
002EEE50                          1528  
002EEE50                          1529  
002EEE50                          1530  
002EEE50                          1531  
002EEE50                          1532  
002EEE50                          1533  
002EEE50                          1534  
002EEE50                          1535  -------------------- end include --------------------
002EEE50                          1536   include "ProjectileRun.x68"
002EEE50                          1537     
002EEE50                          1538  spawnEnemyProjectile
002EEE50  21FC 00000001 24A8      1539      move.l  #1, EnemyProjectileActive
002EEE58  2238 24D0               1540      move.l  EnemyLeft, d1
002EEE5C  0C81 00000001           1541      cmpi.l  #1, d1
002EEE62  6700 0002               1542      BEQ     spawnEnemyProjectileLeft
002EEE66                          1543  
002EEE66                          1544  spawnEnemyProjectileLeft
002EEE66  21FC 00000001 24AC      1545      move.l  #1, EnemyProjectileLeft
002EEE6E                          1546      
002EEE6E  2038 2498               1547      move.l  EnemyChunkY, d0
002EEE72  0C80 00000000           1548      cmpi.l  #0, d0
002EEE78                          1549      
002EEE78                          1550  
002EEE78  6000 0002               1551      BRA     drawEnemyProjectileLeft
002EEE7C                          1552         
002EEE7C                          1553  
002EEE7C                          1554  drawEnemyProjectileLeft
002EEE7C  2238 24B0               1555      move.l  EnemyProjectileWidth, d1
002EEE80  2438 24B4               1556      move.l  EnemyProjectileHeight, d2
002EEE84  21F8 248C 24B8          1557      move.l  EnemyX, EnemyProjectileX
002EEE8A  2038 24B8               1558      move.l  EnemyProjectileX, d0
002EEE8E  90B8 24B0               1559      sub.l   EnemyProjectileWidth, d0
002EEE92  21C0 24B8               1560      move.l  d0, EnemyProjectileX
002EEE96  2638 24B8               1561      move.l  EnemyProjectileX, d3
002EEE9A  2838 2490               1562      move.l  EnemyY, d4
002EEE9E  E88C                    1563      lsr.l   #FRAC_BITS, d4
002EEEA0  21C4 24BC               1564      move.l  d4, EnemyProjectileY
002EEEA4  2A38 24C0               1565      move.l  EnemyProjectileYOffset,d5
002EEEA8  DBB8 24BC               1566      add.l   d5, EnemyProjectileY
002EEEAC  2838 24BC               1567      move.l  EnemyProjectileY, d4
002EEEB0  21FC 00000000 24C4      1568      move.l  #0, EnemyProjectileChunkX
002EEEB8  2A38 24C4               1569      move.l  EnemyProjectileChunkX, d5
002EEEBC  2C38 24C8               1570      move.l  EnemyProjectileChunkY, d6
002EEEC0  4EB9 002EE8B8           1571      jsr     DRAWIMAGE
002EEEC6  4E75                    1572      rts
002EEEC8                          1573  
002EEEC8                          1574  updateProjectileBackground
002EEEC8  2038 24A8               1575      move.l  EnemyProjectileActive, d0
002EEECC  0C80 00000001           1576      cmpi.l  #1, d0
002EEED2  6600 0094               1577      BNE     exitProjectileUpdate
002EEED6                          1578  
002EEED6  41F8 2514               1579      lea     Background, a0
002EEEDA  2238 24B0               1580      move.l  EnemyProjectileWidth, d1
002EEEDE  2438 24B4               1581      move.l  EnemyProjectileHeight, d2
002EEEE2  2638 24B8               1582      move.l  EnemyProjectileX, d3
002EEEE6  2838 24BC               1583      move.l  EnemyProjectileY, d4
002EEEEA  2A38 24B8               1584      move.l  EnemyProjectileX, d5
002EEEEE  2C38 24BC               1585      move.l  EnemyProjectileY, d6
002EEEF2  4EB9 002EE8B8           1586      jsr     DRAWIMAGE
002EEEF8                          1587      
002EEEF8  2038 24A8               1588      move.l  EnemyProjectileActive, d0
002EEEFC  0C80 00000001           1589      cmpi.l  #1, d0
002EEF02  6600 0064               1590      BNE     exitProjectileUpdate
002EEF06                          1591  
002EEF06  2038 24AC               1592      move.l  EnemyProjectileLeft, d0
002EEF0A  0C80 00000001           1593      cmpi.l  #1, d0
002EEF10                          1594  
002EEF10                          1595  
002EEF10                          1596  updateProjectilePositionLeft
002EEF10                          1597      
002EEF10                          1598      
002EEF10  2038 24B8               1599      move.l  EnemyProjectileX, d0
002EEF14  90B8 24D4               1600      sub.l   ProjectileSpeed, d0
002EEF18  21C0 24B8               1601      move.l  d0, EnemyProjectileX
002EEF1C                          1602  
002EEF1C  2038 24B8               1603      move.l  EnemyProjectileX, d0
002EEF20  D0B8 24B0               1604      add.l   EnemyProjectileWidth, d0
002EEF24  0C80 00000000           1605      cmpi.l  #0, d0
002EEF2A                          1606      
002EEF2A  21FC 00000000 24A8      1607      move.l  #0, EnemyProjectileActive
002EEF32                          1608  
002EEF32                          1609  moveProjectileLeft
002EEF32  2038 2498               1610      move.l  EnemyChunkY, d0
002EEF36  0C80 00000000           1611      cmpi.l  #0, d0
002EEF3C  6700 0002               1612      BEQ     updateTinyProjectileLeft
002EEF40                          1613    
002EEF40                          1614      
002EEF40                          1615  updateTinyProjectileLeft
002EEF40  41F9 002A8904           1616      lea     BeamImage, a0
002EEF46                          1617  
002EEF46                          1618  updateDrawProjectileLeft
002EEF46  2238 24B0               1619      move.l  EnemyProjectileWidth, d1
002EEF4A  2438 24B4               1620      move.l  EnemyProjectileHeight, d2
002EEF4E  2638 24B8               1621      move.l  EnemyProjectileX, d3
002EEF52  2838 24BC               1622      move.l  EnemyProjectileY, d4
002EEF56  2A38 24C4               1623      move.l  EnemyProjectileChunkX, d5
002EEF5A  2C38 24C8               1624      move.l  EnemyProjectileChunkY, d6
002EEF5E  4EB9 002EE8B8           1625      jsr     DRAWIMAGE
002EEF64                          1626      
002EEF64  6000 0002               1627      BRA     exitProjectileUpdate
002EEF68                          1628        
002EEF68                          1629  exitProjectileUpdate
002EEF68  4E75                    1630      rts
002EEF6A                          1631  
002EEF6A                          1632   
002EEF6A                          1633  
002EEF6A                          1634  
002EEF6A                          1635  
002EEF6A                          1636  
002EEF6A                          1637  
002EEF6A                          1638  
002EEF6A                          1639  
002EEF6A                          1640  
002EEF6A                          1641  
002EEF6A                          1642  
002EEF6A                          1643  
002EEF6A                          1644  
002EEF6A                          1645  
002EEF6A                          1646  
002EEF6A                          1647  -------------------- end include --------------------
002EEF6A                          1648   include "ProjectileHit.x68"
002EEF6A                          1649  CheckProjectileCollision
002EEF6A                          1650  
002EEF6A                          1651  
002EEF6A                          1652  BeamHitRunner
002EEF6A                          1653      *Player 1 has been hit.  Subtract the beam damage from health
002EEF6A  2238 2470               1654      move.l  RunnerHealth, d1
002EEF6E  92B8 24CC               1655      sub.l   EnemyProjectileDamage, d1
002EEF72                          1656      *Check if player health is below 0
002EEF72  0C81 00000000           1657      cmpi.l  #0, d1
002EEF78  6C00 0008               1658      BGE     ContinueBeamHitRunner
002EEF7C                          1659      * if it is, set health to 0
002EEF7C  4EB9 002EEFC8           1660      jsr     SetHealthToZero
002EEF82                          1661  ContinueBeamHitRunner 
002EEF82  21C1 2470               1662      move.l  d1, RunnerHealth
002EEF86  21F8 247C 2460          1663      move.l  RunnerDamageSprite, RunnerChunkX
002EEF8C                          1664      
002EEF8C  21FC 00000000 24A8      1665      move.l  #0, EnemyProjectileActive
002EEF94                          1666      
002EEF94                          1667      *draw background behind player
002EEF94  41F8 2514               1668      lea     BackGround, a0
002EEF98  2238 24B0               1669      move.l  EnemyProjectileWidth, d1
002EEF9C  2438 24B4               1670      move.l  EnemyProjectileHeight, d2
002EEFA0  2638 24B8               1671      move.l  EnemyProjectileX, d3
002EEFA4  2838 24BC               1672      move.l  EnemyProjectileY, d4
002EEFA8  2A38 24B8               1673      move.l  EnemyProjectileX, d5
002EEFAC  2C38 24BC               1674      move.l  EnemyProjectileY, d6
002EEFB0  4EB9 002EE8B8           1675      jsr     DRAWIMAGE
002EEFB6                          1676      *draw updated score for players
002EEFB6  4EB8 23AE               1677      jsr     updateScoreBackGround
002EEFBA  2038 2470               1678      move.l  RunnerHealth, d0
002EEFBE  2A38 24E0               1679      move.l  RunnerScoreX, d5
002EEFC2  4EB9 002EEBF4           1680      jsr     updateHealth
002EEFC8                          1681      
002EEFC8                          1682         
002EEFC8                          1683  SetHealthToZero
002EEFC8  7200                    1684      move.l  #0, d1
002EEFCA  4E75                    1685      rts
002EEFCC                          1686  
002EEFCC                          1687  
002EEFCC                          1688  
002EEFCC                          1689  
002EEFCC                          1690  
002EEFCC                          1691  
002EEFCC                          1692  
002EEFCC                          1693  
002EEFCC                          1694  
002EEFCC                          1695  
002EEFCC                          1696  
002EEFCC                          1697  
002EEFCC                          1698  
002EEFCC                          1699  -------------------- end include --------------------
002EEFCC                          1700  
002EEFCC                          1701     
002EEFCC                          1702  
002EEFCC                          1703  QUIT
002EEFCC                          1704              END    START    

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACCOUNTFORPADDING   2EE906
ADIGITROUTINE       2EED02
ALL_REG             7FFF
APPLYRUNNERGRAVITY  2EEDB2
BACKGROUND          2514
BDIGITROUTINE       2EECDA
BEAMHITRUNNER       2EEF6A
BEAMIMAGE           2A8904
CALLFUNCTION        2EE968
CDIGITROUTINE       2EECB2
CHECKFORENEMYGROUND  2EEE0C
CHECKFORRUNNERGROUND  2EEDD0
CHECKPROJECTILECOLLISION  2EEF6A
CONTINUEBEAMHITRUNNER  2EEF82
DDIGITROUTINE       2EEC8A
DEADRUNNER          2ED5E4
DRAWCHUNK           2EE7EA
DRAWDIGITPOSITION   2EED2E
DRAWENEMYCALL       22F2
DRAWENEMYPROJECTILELEFT  2EEE7C
DRAWIMAGE           2EE8B8
DRAWPIXEL           2EE89E
DRAWPIXELCODE       52
DRAWPLAYER1HEALTH   2326
DRAWPLAYERCALL      22BE
DRAWPLAYERS         23E4
EDIGITROUTINE       2EEC62
EIGHTDIGIT          2EED56
ENDROUTINE          2EE8B6
ENEMY               28F668
ENEMYBEAMPRESSED    2EEBF0
ENEMYBEAMSPRITE     24D8
ENEMYCHUNKX         2494
ENEMYCHUNKY         2498
ENEMYHEIGHT         2488
ENEMYIDLESPRITE     24A0
ENEMYLEFT           24D0
ENEMYPROJECTILEACTIVE  24A8
ENEMYPROJECTILECHUNKX  24C4
ENEMYPROJECTILECHUNKY  24C8
ENEMYPROJECTILEDAMAGE  24CC
ENEMYPROJECTILEHEIGHT  24B4
ENEMYPROJECTILELEFT  24AC
ENEMYPROJECTILESHOT  2508
ENEMYPROJECTILEWIDTH  24B0
ENEMYPROJECTILEX    24B8
ENEMYPROJECTILEY    24BC
ENEMYPROJECTILEYOFFSET  24C0
ENEMYSPEED          249C
ENEMYSTARTSPRITEX   81
ENEMYVELOCITY       24A4
ENEMYWIDTH          2484
ENEMYWINLOOP        2280
ENEMYWINROUTINE     221A
ENEMYX              248C
ENEMYY              2490
EXITGRAVITY         2EEE0A
EXITPROJECTILEUPDATE  2EEF68
FDIGITROUTINE       2EEC3A
FINISHHEALTH        2EED34
FIVEDIGIT           2EED4A
FOURDIGIT           2EED46
FRAC_BITS           4
FUNCTIONTABLE       2EEB50
GAMELOOP            21E2
GAMEMUSIC           24F8
GAMEOVERBANNER      2A8F8E
GDIGITROUTINE       2EEC14
GET_KEY_INPUT_COMMAND  13
GET_USER_INPUT_COMMAND  13
GRAVITY             9C
GROUND              24DC
INCREMENT           2EE85C
INCREMENTY          2EE890
INITRUNNERINPUT     2EE930
INNERLOOP           2EE82E
INPUTLOOP           2EE932
JUMPLOOP            2EE9AC
LOADINGIMAGE        135F7E
MOVEPROJECTILELEFT  2EEF32
NINEDIGIT           2EED5A
NOCALL              2EE94A
NOFUNCPTR           2EE98C
ONEDIGIT            2EED3A
OUTERLOOP           2EE820
PADDING             2EE92C
PENCOLORCODE        50
PROJECTILESPEED     24D4
QUIT                2EEFCC
RESETBATTLEVARIABLES  205A
RETURNENEMYGROUND   2EEE22
RETURNRUNNERGROUND  2EEDE4
ROUTINE0            2EE9E4
ROUTINE1            2EE9EE
ROUTINE2            2EE9F8
ROUTINE3            2EEA02
ROUTINE4            2EEA0C
ROUTINE5            2EEA16
ROUTINE6            2EEA20
ROUTINE7            2EEA2A
ROUTINE8            2EEA34
ROUTINE9            2EEA3E
ROUTINEE            2EEA48
ROUTINEF            2EEA52
ROUTINEG            2EEA5C
ROUTINEH            2EEA66
ROUTINEI            2EEA70
ROUTINEJ            2EEA7A
ROUTINEK            2EEA84
ROUTINEL            2EEA8E
ROUTINEM            2EEA98
ROUTINEN            2EEAA2
ROUTINEO            2EEAAC
ROUTINEOEXIT        2EEAE8
ROUTINEP            2EEAEA
ROUTINEQ            2EEAF4
ROUTINER            2EEAFE
ROUTINES            2EEB08
ROUTINET            2EEB12
ROUTINEU            2EEB1C
ROUTINEV            2EEB26
ROUTINEWEXIT        2EEB30
ROUTINEX            2EEB32
ROUTINEY            2EEB3C
ROUTINEZ            2EEB46
RUNNER              27D932
RUNNERBEAMPRESSED   2EEBEC
RUNNERCHUNKX        2460
RUNNERCHUNKY        2464
RUNNERDAMAGESPRITE  247C
RUNNERGRAVITYROUTINE  2EED72
RUNNERHEALTH        2470
RUNNERHEIGHT        2454
RUNNERIDLESPRITE    2474
RUNNERJUMPING       246C
RUNNERJUMPSPRITE    2478
RUNNERSCOREX        24E0
RUNNERSHEALTH       2A139E
RUNNERSPEED         2468
RUNNERSTARTSPRITEX  A0
RUNNERVELOCITY      2480
RUNNERWIDTH         2450
RUNNERX             2458
RUNNERY             245C
RUNPROGRAM          2EE90E
SCREENCHANGECODE    21
SETENEMYGROUND      2EEE24
SETHEALTHTOZERO     2EEFC8
SETRUNNERGROUND     2EEDE6
SEVENDIGIT          2EED52
SIXDIGIT            2EED4E
SPACEROUTINE        2EE992
SPACEROUTINEEXIT    2EE9E2
SPACE_KEY           20
SPAWNENEMYPROJECTILE  2EEE50
SPAWNENEMYPROJECTILELEFT  2EEE66
START               2000
THREEDIGIT          2EED42
TITLELOOP           21B8
TITLESCREEN         149EC8
TITLESCREENMUSIC    24E4
TWODIGIT            2EED3E
UPDATEDRAWPROJECTILELEFT  2EEF46
UPDATEHEALTH        2EEBF4
UPDATEPLAYERSBACKGROUNDS  2344
UPDATEPROJECTILEBACKGROUND  2EEEC8
UPDATEPROJECTILEPOSITIONLEFT  2EEF10
UPDATEPROJECTILESBACKGROUNDS  22B6
UPDATERUNNERGRAVITY  2EED5E
UPDATESCOREBACKGROUND  23AE
UPDATETINYPROJECTILELEFT  2EEF40
ZERODIGIT           2EED36
