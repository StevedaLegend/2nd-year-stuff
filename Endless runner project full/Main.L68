00001000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 20/03/2023 13:59:04

00000000                             1  *================================================================================*  
00000000                             2  *================================================================================*
00000000                             3  * Written by : Steve Fasoranti                                                   *
00000000                             4  * Student Number: C00275756                                                      *
00000000                             5  * Date       : 30/1/2023                                                         *
00000000                             6  * Description: This is an endless runner game called dash where you have to dodge* 
00000000                             7  *               Enemies while they are shooting towards you                      *
00000000                             8  *                                                                                *
00000000                             9  *                                                                                *
00000000                            10  * Bugs: Fixed a bug where the runner would float to the top of the screen instead*
00000000                            11  *       of being on the ground. Fixed the runner not being able to print to the  *
00000000                            12  *        screen.  Fixed when the runner wouldnt jump due to input command        *
00000000                            13  *        Fixed the enemy not shooting its projectile.                            *
00000000                            14  *        Fixed an issue where runner would lose all of its lives and instant 0 to*
00000000                            15  *         death.                                                                 *
00000000                            16  *         There is currently a mysterious bug where the title screen would load  *
00000000                            17  *         but then the background of the gameplay would load before it if this   *
00000000                            18  *         happens just press space and it will load up the game.                 *
00000000                            19  *                                                                                *
00000000                            20  *                                                                                *
00000000                            21  * Instrutcions: Press space after the title screen loads in to load the game     *
00000000                            22  *               SPACE can also be used to jump as the runner and O to fire on    *
00000000                            23  *               the enemy side                                                   *
00000000                            24  *.----------------.  .----------------.  .----------------.  .----------------.  *
00000000                            25  *| .--------------. || .--------------. || .--------------. || .--------------. |*
00000000                            26  *| |  ________    | || |      __      | || |    _______   | || |  ____  ____  | |*
00000000                            27  *| | |_   ___ `.  | || |     /  \     | || |   /  ___  |  | || | |_   ||   _| | |*
00000000                            28  *| |   | |   `. \ | || |    / /\ \    | || |  |  (__ \_|  | || |   | |__| |   | |*
00000000                            29  *| |   | |    | | | || |   / ____ \   | || |   '.___`-.   | || |   |  __  |   | |*
00000000                            30  *| |  _| |___.' / | || | _/ /    \ \_ | || |  |`\____) |  | || |  _| |  | |_  | |*
00000000                            31  *| | |________.'  | || ||____|  |____|| || |  |_______.'  | || | |____||____| | |*
00000000                            32  *| |              | || |              | || |              | || |              | |*
00000000                            33  *| '--------------' || '--------------' || '--------------' || '--------------' |*
00000000                            34  *'----------------'  '----------------'  '----------------'  '----------------'  *
00000000                            35  *================================================================================*
00000000                            36  *================================================================================*
00000000                            37  *****************************************************///////////////(///////////
00000000                            38  *****************************************************///////////////(///////////
00000000                            39  *///////////////////////////////////////////////******///////////////(//////////
00000000                            40  *///////////////////////////////////*,,,,,,,*//********,,*//////////////////////
00000000                            41  *///*******************************,(%&&&&&&(,******,*#&&%/**///////////////////
00000000                            42  *///*****************************/(#/,,**/#&(,******,*#%(/(#(///////////////////
00000000                            43  *///**************************/((/*,,/(%%&&&(,,**,,,,*#&&%#((/((**//////////////
00000000                            44  **/****************,,,,,,****,/%#,*(#&&&&&&&&%%%%%%%%%&&&&&%**#%**//////////////
00000000                            45  **/***************/#%%%&#/***,/%#//(%&#*******,.......,**/#%/*#%*,*/////////////
00000000                            46  **/************,*#%(*,,*/(((/,/%&%%%%&&%%(((((/*******/((#%&%%&%*,*/////////////
00000000                            47  **/************,*#&%(/*,**(###%&%///#&&%%(((((#########((#%&%%&%*,*///**////////
00000000                            48  ******************/#%/*((*/((#%&&&&&&&&%%(((((*......,/((#%&&&&%*,*///***///////
00000000                            49  *******************,*#%%##(//(#&#*,,(&&%%#####/*******(###%&##%%*,********//////
00000000                            50  *******************/((#%&%%#(/(#%%%%%&&%%%&&#(#%%%%%%#((%&&&%##(************////
00000000                            51  *****************(#/*//***/%%#((##%&&&&%%%&&/.(&&&&&&%*,(&&%(****************///
00000000                            52  ***************,*#&#(****(%&@@@@&%%&&%%%%%&&&&&&&&&&&&&&&&&%/,***************///
00000000                            53  ***************,*(%%#((%%&#(////#&@&&&%%%%&&(,,,*****,,*#&&%/,..,**,     .,***//
00000000                            54  ****************,,*%&%#(((#%%%%%%%&&&&&&&&@@%###%&&%%###&@@&/,,,....  ...,****//
00000000                            55  *,,,,,,,,,,,,,,,,,,*%@%%%%%&@@@@@@@@@&&&&(*******#&&&@@@@@&(**,,,,,,,,,,,******//
00000000                            56  *,,,,,,,,,,,,,,,,,,,,/%@@@@%*,,,,(&&&%%%%(*******(&&&(,,,,,,,,,,,,,,***,,*******,
00000000                            57  *,,,,,,,,,,,,,,,,,,,,,,,,,,,,*/(%&&%%%%(******/#%&&#/*,,,,,,,,,,,,,**********/(%%
00000000                            58  *,,,,,,,,,,,,,,,,,,,,,,,,,,*(#%%%%%%%#(/***/(#%%%##&&(,,,,,,,,,,,,,,,,,,,.*(#%%##
00000000                            59  *,,,,,,,,..............,,/%%##%%%%%&@@&&&&&@@&%%%##&&(,,,,,,,,,,,,,,,,,.*#%%#((((
00000000                            60  *,,,,,,,..............,/%&##%&&&&&&#,,,,,,,,,#@%###%&/,,,,,,,,,,,,,,..*%&%#((((((
00000000                            61  *......................*(######(,............/#####*.............,**/%&%%#####%&&
00000000                            62  *((((((((((((((((((((((((######(((((((((((((((#####((((((((((((((((((((#(((#####%
00000000                            63  
00001000                            64      ORG    $1000
00001000                            65  START:                
00001000                            66  
00001000  =00000020                 67  SPACE_KEY               equ $20 ;Space key used for the title screen and the runner
00001000  =0000009C                 68  Gravity                 equ $9C    
00001000  =00000013                 69  GET_USER_INPUT_COMMAND  equ 19
00001000  =000000A0                 70  RunnerStartSpriteX      equ 160 ;Runner sprite
00001000  =00000081                 71  EnemyStartSpriteX       equ 129 ;Enemy Sprite
00001000  =00000004                 72  FRAC_BITS               equ 4   ;Pixel bits for the runner and enemy
00001000  =00000001                 73  POINTS                  equ 01         
00001000                            74  
00001000                            75  
00001000                            76  *------------------------------------------------------------*
00001000                            77  *------------------------------------------------------------*
00001000                            78  *--------------Main Game screen change code------------------*
00001000                            79  *------------------------------------------------------------*
00001000                            80  *------------------------------------------------------------*
00001000  103C 0021                 81          move.b  #(ScreenChangeCode) , d0
00001004  223C 02BC0258             82          move.l  #700*$10000+600, d1
0000100A  4E4F                      83          trap    #15
0000100C                            84          
0000100C                            85  *------------------------------------------------------------*
0000100C                            86  *------------------------------------------------------------*
0000100C                            87  *---------Loading in the loading image using draw image------* 
0000100C                            88  *------------------------------------------------------------*
0000100C                            89  *------------------------------------------------------------*
0000100C  41F9 00134FF0             90          lea     LoadingImage, a0
00001012  223C 000000A0             91          move.l  #160, d1
00001018  243C 000000AA             92          move.l  #170, d2
0000101E  263C 0000010E             93          move.l  #270, d3
00001024  283C 000000FA             94          move.l  #250, d4
0000102A  7A00                      95          move.l  #0, d5
0000102C  7C00                      96          move.l  #0, d6
0000102E  4EB9 002DC1DA             97          jsr     DRAWIMAGE
00001034                            98          
00001034                            99  *------------------------------------------------------------*
00001034                           100  *------------------------------------------------------------*
00001034                           101  *-------------Enable the double buffering--------------------*
00001034                           102  *------------------------------------------------------------*
00001034                           103  *------------------------------------------------------------*
00001034  103C 005C                104          move.b  #92, d0
00001038  123C 0011                105          move.b  #17, d1
0000103C  4E4F                     106          trap    #15  
0000103E                           107          
0000103E                           108  *------------------------------------------------------------*
0000103E                           109  *------------------------------------------------------------*
0000103E                           110  *------Load in the title music at memory location 0----------*
0000103E                           111  *------------------------------------------------------------*
0000103E                           112  *------------------------------------------------------------* 
0000103E  43F9 00001546            113          lea     TitleMusic, a1
00001044  123C 0000                114          move.b  #0,d1
00001048  704A                     115          move.l  #74,d0
0000104A  4E4F                     116          Trap    #15
0000104C                           117  
0000104C                           118  
0000104C                           119  *------------------------------------------------------------*
0000104C                           120  *------------------------------------------------------------*
0000104C                           121  *---------Load in the in game music at location 1------------*
0000104C                           122  *------------------------------------------------------------*
0000104C                           123  *------------------------------------------------------------*1      
0000104C  43F9 0000155A            124          lea     RunningMusic, a1
00001052  123C 0001                125          move.b  #1,d1
00001056  704A                     126          move.l  #74,d0
00001058  4E4F                     127          Trap    #15
0000105A                           128  
0000105A                           129  
0000105A                           130  *------------------------------------------------------------*
0000105A                           131  *------------------------------------------------------------*
0000105A                           132  *-----Reseting the varibles for the runner-------------------*
0000105A                           133  *------------------------------------------------------------*
0000105A                           134  *------------------------------------------------------------*
0000105A                           135  ResetVariables
0000105A  23FC 0000000A 000014A4   136          move.l  #10,RunnerX
00001064  23FC 00000226 000014A8   137          move.l  #550, RunnerY
0000106E  23FC 000000A0 000014AC   138          move.l  #160, RunnerChunkX
00001078  23FC 00000000 000014B0   139          move.l  #0, RunnerChunkY
00001082  23FC 0000000A 000014B4   140          move.l  #10, RunnerSpeed
0000108C  23FC 00000000 000014B8   141          move.l  #0, RunnerJumping
00001096  23FC 00000008 000014BC   142          move.l  #8, RunnerHealth
000010A0  23FC 00000000 000014C0   143          move.l  #0, RunnerLeft
000010AA                           144          
000010AA                           145  *------------------------------------------------------------*
000010AA                           146  *------------------------------------------------------------*
000010AA                           147  *-------------Reseting the varibles for the enemy------------*
000010AA                           148  *------------------------------------------------------------*
000010AA                           149  *------------------------------------------------------------*
000010AA  23FC 0000027C 000014E2   150          move.l  #636, EnemyX
000010B4  23FC 0000021C 000014E6   151          move.l  #540, EnemyY
000010BE  23FC 00000081 000014EA   152          move.l  #129, EnemyChunkX
000010C8  23FC 00000000 000014EE   153          move.l  #0, EnemyChunkY
000010D2  23FC 0000000A 000014F2   154          move.l  #10, EnemySpeed
000010DC  23FC 00000001 000014FE   155          move.l  #1, EnemyLeft
000010E6  23FC 00000010 0000151A   156          move.l  #16, EnemyProjectileWidth
000010F0  23FC 0000000C 0000151E   157          move.l  #12, EnemyProjectileHeight
000010FA  23FC 0000000F 0000152A   158          move.l  #15, EnemyProjectileYOffset
00001104  23FC 00000001 00001536   159          move.l  #1, EnemyProjectileDamage
0000110E                           160          
0000110E                           161               
0000110E                           162  *------------------------------------------------------------*
0000110E                           163  *------------------------------------------------------------*
0000110E                           164  *----Draw the Title screen after the loading screen----------*
0000110E                           165  *------------------------------------------------------------*
0000110E                           166  *------------------------------------------------------------*
0000110E  41F9 00148F3A            167          lea     TitleScreen, a0
00001114  223C 000002BC            168          move.l  #700, d1
0000111A  243C 00000258            169          move.l  #600, d2
00001120  7600                     170          move.l  #0, d3
00001122  7800                     171          move.l  #0, d4
00001124  7A00                     172          move.l  #0, d5
00001126  7C00                     173          move.l  #0, d6
00001128  4EB9 002DC1DA            174          jsr     DRAWIMAGE
0000112E                           175          
0000112E                           176  *------------------------------------------------------------*
0000112E                           177  *------------------------------------------------------------*
0000112E                           178  *-------------Enable the double buffering--------------------*
0000112E                           179  *------------------------------------------------------------*
0000112E                           180  *------------------------------------------------------------*
0000112E  103C 005E                181          move.b  #94, d0
00001132  4E4F                     182          trap    #15
00001134                           183          
00001134                           184          
00001134                           185  *-------------------------------------------------------------*
00001134                           186  *-------------------------------------------------------------*
00001134                           187  *------Play music for the title screen only-------------------*
00001134                           188  *-------------------------------------------------------------*
00001134                           189  *-------------------------------------------------------------*          
00001134  123C 0000                190          move.b  #0, d1
00001138  7402                     191          move.l  #2, d2
0000113A  704B                     192          move.l  #75, d0
0000113C  4E4F                     193          trap    #15
0000113E                           194          
0000113E                           195  *------------------------------------------------------------*
0000113E                           196  *------------------------------------------------------------*
0000113E                           197  *------Draw the background of the running scene--------------*
0000113E                           198  *------------------------------------------------------------*
0000113E                           199  *------------------------------------------------------------* 
0000113E  41F9 00001586            200          lea     BackGround, a0
00001144  223C 000002BC            201          move.l  #700, d1
0000114A  243C 00000226            202          move.l  #550, d2
00001150  7600                     203          move.l  #0, d3
00001152  7832                     204          move.l  #50, d4
00001154  7A00                     205          move.l  #0, d5
00001156  7C32                     206          move.l  #50, d6
00001158  4EB9 002DC1DA            207          jsr     DRAWIMAGE
0000115E                           208          
0000115E                           209  *------------------------------------------------------------*
0000115E                           210  *------------------------------------------------------------*
0000115E                           211  *-------------Enable the double buffering--------------------*
0000115E                           212  *------------------------------------------------------------*
0000115E                           213  *------------------------------------------------------------*
0000115E  103C 005E                214          move.b  #94, d0
00001162  4E4F                     215          trap    #15
00001164                           216          
00001164                           217  *------------------------------------------------------------*
00001164                           218  *------------------------------------------------------------*
00001164                           219  *-------------Store the players velocity---------------------*
00001164                           220  *------------------------------------------------------------*
00001164                           221  *------------------------------------------------------------*   
00001164  2039 000014CC            222          move.l  RunnerVelocity, d0
0000116A  E948                     223          lsl     #FRAC_BITS, d0
0000116C  23C0 000014CC            224          move.l  d0, RunnerVelocity
00001172                           225          
00001172                           226  *------------------------------------------------------------*
00001172                           227  *------------------------------------------------------------*
00001172                           228  *---------Store Players postions to the Y coordinate---------*
00001172                           229  *------------------------------------------------------------*
00001172                           230  *------------------------------------------------------------*
00001172  2039 000014A8            231          move.l  RunnerY, d0
00001178  E948                     232          lsl     #FRAC_BITS, d0
0000117A  23C0 000014A8            233          move.l  d0, RunnerY        
00001180  2039 000014E6            234          move.l  EnemyY, d0
00001186  E948                     235          lsl     #FRAC_BITS, d0
00001188  23C0 000014E6            236          move.l  d0, EnemyY
0000118E                           237          
0000118E                           238  *------------------------------------------------------------*
0000118E                           239  *------------------------------------------------------------*
0000118E                           240  *--------------Set a black color-----------------------------*
0000118E                           241  *------------------------------------------------------------*
0000118E                           242  *------------------------------------------------------------*
0000118E  7050                     243          move.l      #80, d0
00001190  7200                     244          move.l      #$00000000, d1
00001192  4E4F                     245          trap        #15
00001194  7051                     246          move.l      #81, d0
00001196  7200                     247          move.l      #$00000000, d1
00001198  4E4F                     248          trap        #15
0000119A                           249          
0000119A                           250  *------------------------------------------------------------*
0000119A                           251  *------------------------------------------------------------*
0000119A                           252  *-----------Draw the black box at the top of the screen------*
0000119A                           253  *------------------------------------------------------------*
0000119A                           254  *------------------------------------------------------------*  
0000119A  323C 0000                255          move.w      #0, d1
0000119E  343C 0000                256          move.w      #0, d2
000011A2  363C 02BC                257          move.w      #700, d3
000011A6  383C 0032                258          move.w      #50, d4
000011AA  7057                     259          move.l      #87, d0
000011AC  4E4F                     260          trap        #15
000011AE                           261          
000011AE                           262  *------------------------------------------------------------*
000011AE                           263  *------------------------------------------------------------*
000011AE                           264  *--------------------Draw Health Bar-------------------------*
000011AE                           265  *------------------------------------------------------------*
000011AE                           266  *------------------------------------------------------------*  
000011AE  4EB9 00001372            267          jsr     DrawRunnerHealth
000011B4                           268  
000011B4                           269  *------------------------------------------------------------*
000011B4                           270  *------------------------------------------------------------*
000011B4                           271  *-------Draw the amount of health the player has-------------*
000011B4                           272  *------------------------------------------------------------*
000011B4                           273  *------------------------------------------------------------* 
000011B4  2039 000014BC            274          move.l  RunnerHealth, d0
000011BA  4EB9 002DC5BE            275          jsr     updateHealth
000011C0  4EB9 0000130A            276          jsr     drawRunnerCall
000011C6                           277       
000011C6                           278          
000011C6                           279  
000011C6                           280  *------------------------------------------------------------*
000011C6                           281  *------------------------------------------------------------*
000011C6                           282  *-----Check and see if the user presses the key to start-----*
000011C6                           283  *------------------------------------------------------------*
000011C6                           284  *------------------------------------------------------------*         
000011C6                           285  TitleLoop
000011C6  103C 0013                286          move.b          #GET_KEY_INPUT_COMMAND,d0
000011CA  7220                     287          move.l          #SPACE_KEY,d1
000011CC  4E4F                     288          TRAP            #15
000011CE  0C81 00000000            289          cmpi.l          #0, d1
000011D4  67F0                     290          BEQ             TitleLoop
000011D6                           291                  
000011D6                           292  *---------------------------------------------------------------------------------------------*
000011D6                           293  *---------------------------------------------------------------------------------------------*
000011D6                           294  *-------Pause the location 0 music  and move onto the location 1 music -----------------------*
000011D6                           295  *---------------------------------------------------------------------------------------------*
000011D6                           296  *---------------------------------------------------------------------------------------------*
000011D6  123C 0000                297          move.b  #0,d1 
000011DA  7402                     298          move.l  #2,d2
000011DC  704D                     299          move.l  #77,d0
000011DE  4E4F                     300          Trap    #15
000011E0                           301          
000011E0  123C 0001                302          move.b  #1, d1
000011E4  7401                     303          move.l  #1, d2
000011E6  704D                     304          move.l  #77, d0
000011E8  4E4F                     305          trap    #15
000011EA                           306          
000011EA                           307  *------------------------------------------------------------*
000011EA                           308  *------------------------------------------------------------*
000011EA                           309  *-------------Enable the double buffering--------------------*
000011EA                           310  *------------------------------------------------------------*
000011EA                           311  *------------------------------------------------------------*        
000011EA  103C 005E                312          move.b  #94, d0
000011EE  4E4F                     313          trap    #15
000011F0                           314  
000011F0                           315  *------------------------------------------------------------*
000011F0                           316  *------------------------------------------------------------*
000011F0                           317  *-------------Inisilise the main game loop-------------------*
000011F0                           318  *------------------------------------------------------------*
000011F0                           319  *------------------------------------------------------------*
000011F0                           320  GAMELOOP:
000011F0  4EB9 00001390            321      jsr     updatePlayersBackgrounds
000011F6  4EB9 002DC252            322      jsr     initRunnerInput
000011FC  4EB9 002DCAA6            323      jsr     updateRunnerGravity
00001202  4EB9 00001302            324      jsr     updateProjectilesBackgrounds
00001208  4EB9 002DC91E            325      jsr     CheckProjectileCollision 
0000120E  4EB9 00001430            326      jsr     drawPlayers
00001214                           327      
00001214                           328  *------------------------------------------------------------*
00001214                           329  *------------------------------------------------------------*
00001214                           330  *-------------Enable the double buffering--------------------*
00001214                           331  *------------------------------------------------------------*
00001214                           332  *------------------------------------------------------------*         
00001214  103C 005E                333      move.b  #94, d0                     
00001218  4E4F                     334      trap    #15
0000121A                           335     
0000121A                           336  
0000121A                           337  *---------------------------------------------------------------------------------------------*
0000121A                           338  *---------------------------------------------------------------------------------------------*
0000121A                           339  *-------------Check and see the players health if its at 0 print GAME OVER--------------------*
0000121A                           340  *---------------------------------------------------------------------------------------------*
0000121A                           341  *---------------------------------------------------------------------------------------------*    
0000121A  2039 000014BC            342      move.l  RunnerHealth, d0
00001220  0C80 00000001            343      cmpi.l  #1, d0
00001226  6D00 003C                344      BLT     GAMEOVER0
0000122A                           345      
0000122A  60C4                     346      bra     GAMELOOP          
0000122C                           347      
0000122C                           348  
0000122C                           349      
0000122C                           350  
0000122C                           351  *------------------------------------------------------------*
0000122C                           352  *------------------------------------------------------------*
0000122C                           353  *-------------Draw where the runners dead pos is ------------*
0000122C                           354  *------------------------------------------------------------*
0000122C                           355  *------------------------------------------------------------*    
0000122C  23FC 0000000A 000014A4   356      move.l  #10, RunnerX
00001236  23FC 0000021C 000014A8   357      move.l  #540, RunnerY
00001240  2039 000014A8            358      move.l  RunnerY, d0
00001246  E988                     359      lsl.l   #4, d0
00001248  23C0 000014A8            360      move.l  d0, RunnerY
0000124E  23FC 000000A0 000014AC   361      move.l  #160, RunnerChunkX
00001258  4EB9 0000130A            362      jsr DrawRunnerCall
0000125E                           363      
0000125E                           364  *------------------------------------------------------------*
0000125E                           365  *------------------------------------------------------------*
0000125E                           366  *-------------Enable the double buffering--------------------*
0000125E                           367  *------------------------------------------------------------*
0000125E                           368  *------------------------------------------------------------*       
0000125E                           369  
0000125E  103C 005E                370      move.b  #94, d0
00001262  4E4F                     371      trap    #15
00001264                           372  
00001264                           373  *-------------------------------------------------------------------------------*
00001264                           374  *-------------------------------------------------------------------------------*
00001264                           375  *-------------Stay on the game loop until user presses SPACE--------------------*
00001264                           376  *-------------------------------------------------------------------------------*
00001264                           377  *-------------------------------------------------------------------------------*     
00001264                           378  GAMEOVER0    
00001264  4EB9 00001390            379      jsr     updatePlayersBackgrounds
0000126A                           380      
0000126A  4EB9 002DC814            381      jsr     updateProjectilesBackground
00001270                           382      
00001270                           383  *-------------------------------------------------------------------------------*
00001270                           384  *-------------------------------------------------------------------------------*
00001270                           385  *-------------Draw the game over image------------------------------------------*
00001270                           386  *-------------------------------------------------------------------------------*
00001270                           387  *-------------------------------------------------------------------------------*    
00001270  41F9 0000156A            388      lea     GameOver, a0
00001276  223C 000002BC            389      move.l  #700, d1
0000127C  7464                     390      move.l  #100, d2
0000127E  7600                     391      move.l  #0, d3
00001280  283C 0000012C            392      move.l  #300, d4
00001286  7A00                     393      move.l  #0, d5
00001288  7C00                     394      move.l  #0, d6
0000128A  4EB9 002DC1DA            395      jsr     DRAWIMAGE
00001290                           396  
00001290                           397  *-------------------------------------------------------------------------------*
00001290                           398  *-------------------------------------------------------------------------------*
00001290                           399  *-------------Reset the enemy back into position--------------------------------*
00001290                           400  *-------------------------------------------------------------------------------*
00001290                           401  *-------------------------------------------------------------------------------*    
00001290  23FC 0000027C 000014E2   402      move.l  #636, EnemyX
0000129A  23FC 0000021C 000014E6   403      move.l  #540, EnemyY
000012A4  2039 000014E6            404      move.l  EnemyY, d0
000012AA  E988                     405      lsl.l   #FRAC_BITS, d0
000012AC  23C0 000014E6            406      move.l  d0, EnemyY
000012B2  23FC 00000081 000014EA   407      move.l  #129, EnemyChunkX
000012BC  4EB9 0000133E            408      jsr DrawEnemyCall
000012C2  123C 0001                409      move.b  #1, d1
000012C6  7402                     410      move.l  #2, d2
000012C8  704D                     411      move.l  #77, d0
000012CA  4E4F                     412      trap    #15
000012CC                           413      
000012CC                           414    
000012CC                           415  *------------------------------------------------------------*
000012CC                           416  *------------------------------------------------------------*
000012CC                           417  *-------------Draw the dead runner image---------------------*
000012CC                           418  *------------------------------------------------------------*
000012CC                           419  *------------------------------------------------------------*
000012CC                           420      
000012CC  41F9 002DAF06            421      lea     DeadRunner, a0
000012D2  7232                     422      move.l  #50, d1
000012D4  741E                     423      move.l  #30, d2
000012D6  760A                     424      move.l  #10, d3
000012D8  283C 00000230            425      move.l  #560, d4
000012DE  7A00                     426      move.l  #0, d5
000012E0  7C00                     427      move.l  #0, d6
000012E2  4EB9 002DC1DA            428      jsr     DRAWIMAGE
000012E8                           429      
000012E8                           430  *------------------------------------------------------------*
000012E8                           431  *------------------------------------------------------------*
000012E8                           432  *-------------Enable the double buffering--------------------*
000012E8                           433  *------------------------------------------------------------*
000012E8                           434  *------------------------------------------------------------*     
000012E8  103C 005E                435      move.b  #94, d0
000012EC  4E4F                     436      trap    #15
000012EE                           437  
000012EE                           438  *-------------------------------------------------------------------------------*
000012EE                           439  *-------------------------------------------------------------------------------*
000012EE                           440  *----Stay on the game over loop until the user uses the key input command-------*
000012EE                           441  *-------------------------------------------------------------------------------*
000012EE                           442  *-------------------------------------------------------------------------------*
000012EE                           443  GAMEOVERLOOP
000012EE  103C 0013                444      move.b          #GET_KEY_INPUT_COMMAND,d0
000012F2  7220                     445      move.l          #$20,d1
000012F4  4E4F                     446      TRAP            #15
000012F6  0C81 00000000            447      cmpi.l          #0, d1
000012FC  6600 FD5C                448      BNE             ResetVariables
00001300  60EC                     449      BRA             GAMEOVERLOOP
00001302                           450      
00001302                           451  
00001302                           452  *------------------------------------------------------------*
00001302                           453  *------------------------------------------------------------*
00001302                           454  *-------------Update the projectiles background--------------*
00001302                           455  *------------------------------------------------------------*
00001302                           456  *------------------------------------------------------------* 
00001302                           457  updateProjectilesBackgrounds
00001302  4EB9 002DC814            458      jsr     updateProjectilesBackGround
00001308  4E75                     459      rts
0000130A                           460      
0000130A                           461  *------------------------------------------------------------*
0000130A                           462  *------------------------------------------------------------*
0000130A                           463  *-------------Load in values for runner and enemy------------*
0000130A                           464  *------------------------------------------------------------*
0000130A                           465  *------------------------------------------------------------*
0000130A                           466  DrawRunnerCall
0000130A  41F9 0027C9A4            467      lea     Runner, a0
00001310  2239 0000149C            468      move.l  RunnerWidth, d1
00001316  2439 000014A0            469      move.l  RunnerHeight, d2
0000131C  2639 000014A4            470      move.l  RunnerX, d3
00001322  2839 000014A8            471      move.l  RunnerY, d4 
00001328  E84C                     472      lsr     #4, d4
0000132A  2A39 000014AC            473      move.l  RunnerChunkX, d5
00001330  2C39 000014B0            474      move.l  RunnerChunkY, d6
00001336  4EB9 002DC1DA            475      jsr     DRAWIMAGE
0000133C                           476      
0000133C  4E75                     477      rts   
0000133E                           478  DrawEnemyCall
0000133E  41F9 0028E6DA            479      lea     Enemy, a0
00001344  2239 000014DA            480      move.l  EnemyWidth, d1
0000134A  2439 000014DE            481      move.l  EnemyHeight, d2
00001350  2639 000014E2            482      move.l  EnemyX, d3
00001356  2839 000014E6            483      move.l  EnemyY, d4
0000135C  E84C                     484      lsr     #FRAC_BITS, d4
0000135E  2A39 000014EA            485      move.l  EnemyChunkX, d5
00001364  2C39 000014EE            486      move.l  EnemyChunkY, d6
0000136A  4EB9 002DC1DA            487      jsr     DRAWIMAGE
00001370                           488      
00001370  4E75                     489      rts
00001372                           490      
00001372                           491  *------------------------------------------------------------*
00001372                           492  *------------------------------------------------------------*
00001372                           493  *-------------Draw the health bar for the runner-------------*
00001372                           494  *------------------------------------------------------------*
00001372                           495  *------------------------------------------------------------*     
00001372                           496  DrawRunnerHealth
00001372  41F9 002A0410            497      lea     RunnerHealthImage, a0
00001378  223C 000000C8            498      move.l  #200, d1
0000137E  7432                     499      move.l  #50, d2
00001380  7600                     500      move.l  #0, d3
00001382  7800                     501      move.l  #0, d4
00001384  7A00                     502      move.l  #0, d5
00001386  7C00                     503      move.l  #0, d6
00001388  4EB9 002DC1DA            504      jsr     DRAWIMAGE
0000138E  4E75                     505      rts
00001390                           506      
00001390                           507  *------------------------------------------------------------*
00001390                           508  *------------------------------------------------------------*
00001390                           509  *--------Draw background for both runner and enemy-----------*
00001390                           510  *------------------------------------------------------------*
00001390                           511  *------------------------------------------------------------* 
00001390                           512  updatePlayersBackgrounds
00001390  41F9 00001586            513      lea     BackGround, a0
00001396  2239 0000149C            514      move.l  RunnerWidth, d1
0000139C  2439 000014A0            515      move.l  RunnerHeight, d2
000013A2  2639 000014A4            516      move.l  RunnerX, d3
000013A8  2839 000014A8            517      move.l  RunnerY, d4
000013AE  E84C                     518      lsr     #FRAC_BITS, d4
000013B0  2A39 000014A4            519      move.l  RunnerX, d5
000013B6  2C39 000014A8            520      move.l  RunnerY, d6
000013BC  E84E                     521      lsr     #FRAC_BITS, d6
000013BE  4EB9 002DC1DA            522      jsr     DRAWIMAGE
000013C4  41F9 00001586            523      lea     BackGround, a0
000013CA  2239 000014DA            524      move.l  EnemyWidth, d1
000013D0  2439 000014DE            525      move.l  EnemyHeight, d2
000013D6  2639 000014E2            526      move.l  EnemyX, d3
000013DC  2839 000014E6            527      move.l  EnemyY, d4
000013E2  E84C                     528      lsr     #FRAC_BITS, d4
000013E4  2A39 000014E2            529      move.l  EnemyX, d5
000013EA  2C39 000014E6            530      move.l  EnemyY, d6
000013F0  E84E                     531      lsr     #FRAC_BITS, d6
000013F2  4EB9 002DC1DA            532      jsr     DRAWIMAGE
000013F8  4E75                     533      rts
000013FA                           534      
000013FA                           535  *------------------------------------------------------------*
000013FA                           536  *------------------------------------------------------------*
000013FA                           537  *--------Display the score number over the black bar---------*
000013FA                           538  *------------------------------------------------------------*
000013FA                           539  *------------------------------------------------------------*
000013FA                           540  updateScoreBackGround
000013FA  7050                     541      move.l      #80, d0
000013FC  7200                     542      move.l      #$00000000, d1
000013FE  4E4F                     543      trap        #15
00001400                           544      
00001400  7051                     545      move.l      #81, d0
00001402  7200                     546      move.l      #$00000000, d1
00001404  4E4F                     547      trap        #15
00001406                           548  
00001406  323C 00CD                549      move.w      #205, d1
0000140A  343C 0005                550      move.w      #5, d2
0000140E  363C 00EB                551      move.w      #235, d3
00001412  383C 0032                552      move.w      #50, d4
00001416  7057                     553      move.l      #87, d0
00001418  4E4F                     554      trap        #15
0000141A                           555      
0000141A  323C 01CC                556      move.w      #460, d1
0000141E  343C 0005                557      move.w      #5, d2
00001422  363C 01EF                558      move.w      #495, d3
00001426  383C 0032                559      move.w      #50, d4
0000142A  7057                     560      move.l      #87, d0
0000142C  4E4F                     561      trap        #15
0000142E                           562      
0000142E  4E75                     563      rts
00001430                           564  
00001430                           565  *------------------------------------------------------------*
00001430                           566  *------------------------------------------------------------*
00001430                           567  *-------------Draw both runner and enemy---------------------*
00001430                           568  *------------------------------------------------------------*
00001430                           569  *------------------------------------------------------------* 
00001430                           570  drawPlayers 
00001430                           571        
00001430  41F9 0027C9A4            572      lea     Runner, a0
00001436  2239 0000149C            573      move.l  RunnerWidth, d1
0000143C  2439 000014A0            574      move.l  RunnerHeight, d2
00001442  2639 000014A4            575      move.l  RunnerX, d3
00001448  2839 000014A8            576      move.l  RunnerY, d4
0000144E  E84C                     577      lsr     #FRAC_BITS, d4
00001450  2A39 000014AC            578      move.l  RunnerChunkX, d5
00001456  2C39 000014B0            579      move.l  RunnerChunkY, d6
0000145C  4EB9 002DC1DA            580      jsr     DRAWIMAGE
00001462                           581      
00001462  41F9 0028E6DA            582      lea     Enemy, a0
00001468  2239 000014DA            583      move.l  EnemyWidth, d1
0000146E  2439 000014DE            584      move.l  EnemyHeight, d2
00001474  2639 000014E2            585      move.l  EnemyX, d3
0000147A  2839 000014E6            586      move.l  EnemyY, d4
00001480  E84C                     587      lsr     #FRAC_BITS, d4
00001482  2A39 000014EA            588      move.l  EnemyChunkX, d5
00001488  2C39 000014EE            589      move.l  EnemyChunkY, d6
0000148E  4EB9 002DC1DA            590      jsr     DRAWIMAGE
00001494                           591      
00001494  103C 005E                592      move.b  #94, d0
00001498  4E4F                     593      trap    #15
0000149A                           594      
0000149A  4E75                     595      rts
0000149C                           596      
0000149C                           597  *-----------------------------------------------------------------------*
0000149C                           598  *-----------------------------------------------------------------------*
0000149C                           599  *-------------LIST OF VARIABLES AND CONSTANTS FOR RUNNER----------------*
0000149C                           600  *-----------------------------------------------------------------------*
0000149C                           601  *-----------------------------------------------------------------------*     
0000149C                           602  RunnerWidth
0000149C= 00000020                 603      dc.l   32
000014A0                           604  RunnerHeight
000014A0= 00000024                 605      dc.l   36 
000014A4                           606  RunnerX
000014A4= 0000000A                 607      dc.l    10
000014A8                           608  RunnerY
000014A8= 00000226                 609      dc.l    550
000014AC                           610  RunnerChunkX
000014AC= 000000A0                 611      dc.l    160
000014B0                           612  RunnerChunkY
000014B0= 00000000                 613      dc.l    0
000014B4                           614  RunnerSpeed
000014B4= 0000000A                 615      dc.l    10
000014B8                           616  RunnerJumping
000014B8= 00000000                 617      dc.l    0
000014BC                           618  RunnerHealth
000014BC= 00000008                 619      dc.l    8
000014C0                           620  RunnerLeft
000014C0= 00000000                 621      dc.l    0
000014C4                           622  RunnerIdleSprite
000014C4= 000000A0                 623      dc.l    160
000014C8                           624  RunnerJumpSprite
000014C8= 00000100                 625      dc.l    256
000014CC                           626  RunnerVelocity
000014CC= 00000000                 627      dc.l    0    
000014D0                           628  RunnerScoreX
000014D0= 000000C8                 629      dc.l    200
000014D4                           630  RunnerDamageSprite
000014D4= 00000120                 631      dc.l    288
000014D8                           632  PLAYER_SCORE    
000014D8                           633      DS.W    01 
000014DA                           634      
000014DA                           635  *------------------------------------------------------------*
000014DA                           636  *------------------------------------------------------------*
000014DA                           637  *-------------ENEMY VARIABLES AND CONSTANTS------------------*
000014DA                           638  *------------------------------------------------------------*
000014DA                           639  *------------------------------------------------------------*     
000014DA                           640  EnemyWidth
000014DA= 00000020                 641      dc.l   32
000014DE                           642  EnemyHeight
000014DE= 00000026                 643      dc.l    38 
000014E2                           644  EnemyX
000014E2= 0000027C                 645      dc.l    636
000014E6                           646  EnemyY
000014E6= 0000021C                 647      dc.l    540
000014EA                           648  EnemyChunkX
000014EA= 00000081                 649      dc.l    129
000014EE                           650  EnemyChunkY
000014EE= 00000000                 651      dc.l    0
000014F2                           652  EnemySpeed
000014F2= 0000000A                 653      dc.l    10
000014F6                           654  EnemyJumping
000014F6= 00000000                 655      dc.l    0
000014FA                           656  EnemyHealth
000014FA= 00000005                 657      dc.l    5
000014FE                           658  EnemyLeft
000014FE= 00000001                 659      dc.l    1
00001502                           660  EnemyIdleSprite
00001502= 00000081                 661      dc.l    129
00001506                           662  EnemyJumpSprite
00001506= 00000020                 663      dc.l    32
0000150A                           664  EnemyBeamSprite
0000150A= 00000040                 665      dc.l    64
0000150E                           666  EnemyDamageSprite
0000150E= 00000000                 667      dc.l    0
00001512                           668  EnemyProjectileActive
00001512= 00000000                 669      dc.l    0
00001516                           670  EnemyProjectileLeft
00001516= 00000000                 671      dc.l    0
0000151A                           672  EnemyProjectileWidth
0000151A= 00000010                 673      dc.l    16
0000151E                           674  EnemyProjectileHeight
0000151E= 0000000C                 675      dc.l    12
00001522                           676  EnemyProjectileX
00001522= 000002BC                 677      dc.l    700
00001526                           678  EnemyProjectileY
00001526= 0000000A                 679      dc.l    10
0000152A                           680  EnemyProjectileYOffset
0000152A= 0000000A                 681      dc.l    10
0000152E                           682  EnemyProjectileChunkX
0000152E= 0000002A                 683      dc.l    42
00001532                           684  EnemyProjectileChunkY
00001532= 00000000                 685      dc.l    0
00001536                           686  EnemyProjectileDamage
00001536= 00000001                 687      dc.l    1
0000153A                           688  EnemyVelocity
0000153A= 00000000                 689      dc.l    0
0000153E                           690  
0000153E                           691  *------------------------------------------------------------*
0000153E                           692  *------------------------------------------------------------*
0000153E                           693  *-------------GAME VARIABLES AND CONSTANTS-------------------*
0000153E                           694  *------------------------------------------------------------*
0000153E                           695  *------------------------------------------------------------*     
0000153E                           696  Ground
0000153E= 00000226                 697      dc.l    550
00001542                           698  ProjectileSpeed
00001542= 00000014                 699      dc.l    20
00001546                           700  
00001546                           701  
00001546                           702      
00001546                           703      
00001546                           704  *----------------------------------*
00001546                           705  *----------------------------------*
00001546                           706  *-------------MUSIC----------------*
00001546                           707  *----------------------------------*
00001546                           708  *----------------------------------*
00001546                           709  TitleMusic
00001546= 5469746C 65736372 ...    710      dc.l    'Titlescreen.wav',0
0000155A                           711  RunningMusic
0000155A= 496E6761 6D652E77 ...    712      dc.l    'Ingame.wav',0
0000156A                           713  GameOver
0000156A= 47616D65 6F766572 ...    714      dc.l    'Gameover.wav',0
0000157A                           715          
0000157A                           716      
0000157A                           717  *----------------------------------*
0000157A                           718  *----------------------------------*
0000157A                           719  *-------------SOUND EFFECTS--------*
0000157A                           720  *----------------------------------*
0000157A                           721  *----------------------------------*    
0000157A                           722  GetHit
0000157A= 4869742E 77617600 ...    723      dc.l    'Hit.wav',0
00001586                           724  
00001586                           725  
00001586                           726  *------------------------------------------------------------*
00001586                           727  *------------------------------------------------------------*
00001586                           728  *-------------IMAGES-----------------------------------------*
00001586                           729  *------------------------------------------------------------*
00001586                           730  *------------------------------------------------------------*    
00001586                           731  Background
00001586                           732      INCBIN "Game1.bmp"
00134FF0                           733  LoadingImage
00134FF0                           734      INCBIN "loadinggame.bmp"
00148F3A                           735  TitleScreen
00148F3A                           736      INCBIN "Titlesmall.bmp"
0027C9A4                           737  Runner
0027C9A4                           738      INCBIN "updated.bmp"
0028E6DA                           739  Enemy
0028E6DA                           740      INCBIN "Enemy1.bmp"
002A0410                           741  RunnerHealthImage
002A0410                           742      INCBIN "RunnersHealth.bmp"
002A7976                           743  SmallBeam
002A7976                           744      INCBIN "smallBeam.bmp"
002A7A80                           745  EndGame
002A7A80                           746      INCBIN "ded.bmp"
002DAF06                           747  DeadRunner
002DAF06                           748      INCBIN "Deadrunner.bmp"
002DC10C                           749  
002DC10C                           750  
002DC10C                           751  *------------------------------------------------------------*
002DC10C                           752  *------------------------------------------------------------*
002DC10C                           753  *-------------------INCLUDE OTHER FILES----------------------*
002DC10C                           754  *------------------------------------------------------------*
002DC10C                           755  *------------------------------------------------------------*
002DC10C                           756     
002DC10C                           757   include "DrawImages.x68"  
002DC10C                           758  
002DC10C  =00000050                759  PenColorCode      EQU     80 ;Use the pen to draw the image
002DC10C  =00000052                760  DrawPixelCode     EQU     82 ;Draw the pixels in the game (assets and sprites)
002DC10C  =00000021                761  ScreenChangeCode  EQU     33 ;Used to change the resolution
002DC10C                           762  
002DC10C                           763  
002DC10C                           764  DrawChunk
002DC10C  206F 0004                765          move.l  4(sp), a0               ;Stores the pointer so we can grab image access
002DC110  2028 000A                766          move.l  10(a0), d0              ;get the header of the image
002DC114  E158                     767          rol.w   #8, d0                  ;rotate the image so it mot upside down          
002DC116  4840                     768          swap    d0                      ;we swap so that the image can fully rotate
002DC118  E158                     769          rol.w   #8, d0                  ;we then rotate again so that the value of the image can be stored
002DC11A  D0C0                     770          add.w   d0, a0                  add the position from memory into data
002DC11C                           771          
002DC11C                           772  
002DC11C                           773      
002DC11C  4284                     774          clr.l   d4
002DC11E  282F 0024                775          move.l  36(sp),d4
002DC122  2A2F 0014                776          move.l  20(sp), d5
002DC126  DAAF 000C                777          add.l   12(sp), d5
002DC12A  9885                     778          sub.l   d5, d4
002DC12C  4285                     779          clr.l   d5
002DC12E  3A04                     780          move.w  d4, d5
002DC130  4284                     781          clr.l   d4
002DC132                           782          
002DC132  282F 0020                783          move.l  32(sp), d4
002DC136                           784          
002DC136  CAC4                     785          mulu.w  d4, d5
002DC138                           786          
002DC138                           787  
002DC138  D1C5                     788          add.l   d5, a0
002DC13A  D1C5                     789          add.l   d5, a0 
002DC13C  D1C5                     790          add.l   d5, a0       
002DC13E  262F 000C                791          move.l  12(sp), d3
002DC142                           792          
002DC142                           793          
002DC142                           794  OUTERLOOP
002DC142  3C3C 0000                795          move.w  #0, d6                  
002DC146  282F 0010                796          move.l  16(sp), d4
002DC14A  C8FC 0003                797          mulu.w  #3, d4
002DC14E  D0C4                     798          add.w   d4, a0                  
002DC150                           799          
002DC150                           800  INNERLOOP
002DC150  4284                     801          clr.l   d4                      ;make sure we clear d4
002DC152  1818                     802          move.b  (a0)+,d4                ;indicate the first pixel of the image loop
002DC154  4844                     803          swap.w  d4                      ;swap the pixel so we change its position
002DC156  4285                     804          clr.l   d5                      ;we now clear d5 (so the image can load into it)
002DC158  2A04                     805          move.l  d4, d5                  ;store previously found pixel data in d5 for next value
002DC15A  4284                     806          clr.l   d4                      ;clear d4 
002DC15C  1818                     807          move.b  (a0)+, d4               ;get the memorys next bit
002DC15E  E14C                     808          lsl     #8, d4                  ;we use logical shift left to get pixel in top of second word to combine with previous pixel bit
002DC160  DA84                     809          add.l   d4, d5                  ;combine the data
002DC162  4284                     810          clr.l   d4                      ;clear d4 once again
002DC164  1818                     811          move.b  (a0)+, d4               ;use that last bits
002DC166  DA84                     812          add.l   d4, d5                  ;combine it to the end of the previous two bits to get the pixel value
002DC168                           813          
002DC168                           814          
002DC168  4284                     815          clr.l   d4                      ;If pixel isnt pink, do not draw it as we declared pink backgrounds as a colour 
002DC16A  1838 00FF                816          move.b  $FF, d4
002DC16E  4844                     817          swap    d4
002DC170  1838 00FF                818          move.b  $FF, d4
002DC174                           819          
002DC174  BA44                     820          cmp     d4, d5
002DC176  6700 0006                821          BEQ     INCREMENT
002DC17A                           822          
002DC17A  6000 0044                823          BRA     DRAWPIXEL               ;pixel meets criteria and can be printed
002DC17E                           824  
002DC17E                           825  INCREMENT
002DC17E  4284                     826          clr.l   d4                      ;make sure d4 is empty for use  
002DC180  5246                     827          add.w   #1,d6                   ;increment x counter by one
002DC182                           828          
002DC182                           829  
002DC182  282F 0010                830          move.l  16(sp), d4
002DC186  D886                     831          add.l   d6, d4
002DC188  2A2F 0020                832          move.l  32(sp), d5
002DC18C  B845                     833          cmp     d5, d4
002DC18E  6700 0022                834          BEQ     INCREMENTY
002DC192                           835        
002DC192  282F 0008                836          move.l  8(sp), d4               ;move width of image into register
002DC196  BC44                     837          cmp     d4, d6                  ;see if counter is beyond x bounds
002DC198  66B6                     838          BNE     INNERLOOP               ;if it is not, loop again
002DC19A                           839          
002DC19A                           840  
002DC19A  4284                     841          clr.l   d4
002DC19C  282F 0010                842          move.l  16(sp), d4
002DC1A0  D8AF 0008                843          add.l   8(sp), d4
002DC1A4  4285                     844          clr.l   d5
002DC1A6  2A2F 0020                845          move.l  32(sp), d5
002DC1AA  9A84                     846          sub.l   d4, d5
002DC1AC  CAFC 0003                847          mulu.w  #3, d5
002DC1B0                           848    
002DC1B0  D1C5                     849          add.l   d5, a0    ;add an offest to the address
002DC1B2                           850          
002DC1B2                           851          
002DC1B2                           852  INCREMENTY        
002DC1B2                           853  
002DC1B2  D1F9 002DC24E            854          add.l   Padding, a0             ;add padding.  If there is none, the address won't skip anything
002DC1B8                           855          
002DC1B8  5343                     856          sub.w   #1, d3                  ;decrement y counter to see if you are out of the y iteration
002DC1BA  6686                     857          BNE     OUTERLOOP               ;if it is not, loop back to outer loop
002DC1BC  6000 001A                858          BRA     ENDROUTINE              ;branch to end of subroutine, whole image has been iterated
002DC1C0                           859          
002DC1C0                           860          
002DC1C0                           861  DRAWPIXEL
002DC1C0  2205                     862          move.l  d5, d1                  ;move pixel data into d1 for pen color
002DC1C2  7050                     863          move.l  #PenColorCode, d0       ;set trap code for setting the pen color
002DC1C4  4E4F                     864          trap    #15                     ;set pen color
002DC1C6                           865                           
002DC1C6  222F 0018                866          move.l   24(sp), d1             ;store the starting x position of the chunk
002DC1CA  D286                     867          add.l    d6, d1                 ;add iteration position of x to start of chunk
002DC1CC                           868          
002DC1CC  242F 001C                869          move.l  28(sp), d2              ;start at top of chunk to flip image
002DC1D0  D483                     870          add.l   d3, d2                  ;subtract current y position
002DC1D2  7052                     871          move.l  #DrawPixelCode, d0      ;Set trap code to draw pixel at position
002DC1D4  4E4F                     872          trap    #15                     ;draw pixel at position
002DC1D6                           873          
002DC1D6  60A6                     874          BRA     INCREMENT               ;increment position
002DC1D8                           875          
002DC1D8                           876          
002DC1D8                           877  ENDROUTINE
002DC1D8  4E75                     878          rts                             ;branch back to end of program
002DC1DA                           879  
002DC1DA                           880  
002DC1DA                           881  DRAWIMAGE
002DC1DA                           882  
002DC1DA                           883          ;Reset the padding
002DC1DA  23FC 00000000 002DC24E   884          move.l  #0, Padding
002DC1E4                           885          
002DC1E4  7024                     886          move.l  #36, d0                 ;number of 7 4 byte arguments to prepare stack to receive
002DC1E6  9FC0                     887          sub.l   d0, sp                  ;prepare stack to receive arguments 
002DC1E8                           888          
002DC1E8  2E88                     889          move.l  a0, (sp)                ;load pointer to the .bmp file onto the stack
002DC1EA                           890          
002DC1EA                           891          ;store width of chunk on the stack
002DC1EA  2F41 0004                892          move.l  d1, 4(sp)
002DC1EE                           893          ;store height of the chunk on the stack 
002DC1EE  2F42 0008                894          move.l  d2, 8(sp)               
002DC1F2                           895          
002DC1F2                           896          ;add start of chunk to move with image
002DC1F2  2F45 000C                897          move.l   d5, 12(sp)             ;store Top left x of draw chunk on stack
002DC1F6                           898          
002DC1F6                           899          ;subtract y position from height to get start y
002DC1F6  2F46 0010                900          move.l  d6, 16(sp)              ;store Top left y of draw chunk on stack                      
002DC1FA                           901  
002DC1FA  2F43 0014                902          move.l  d3, 20(sp)              ;store Beginning print location for x axis on stack
002DC1FE  2F44 0018                903          move.l  d4, 24(sp)              ;store Beginning print location for y axis on stack
002DC202                           904          
002DC202  2228 0012                905          move.l  18(a0), d1              ;get width of image from .bmp file
002DC206  E159                     906          rol.w   #8, d1          
002DC208  4841                     907          swap    d1
002DC20A  E159                     908          rol.w   #8, d1                  ;rotate and swap long word to get true width value to use later
002DC20C  2F41 001C                909          move.l  d1, 28(sp)              ;store width of image to make variable not global
002DC210                           910  
002DC210                           911          
002DC210                           912     
002DC210  7404                     913          move.l  #4, d2                  ;move the value 4 into d2 for padding calculation
002DC212  C2FC 0003                914          mulu.w  #3, d1                  ;multiply image width by 3 for formula
002DC216  82FC 0004                915          divu.w  #4, d1                  ;divide by four to find remainder
002DC21A  4841                     916          swap    d1                      ;swap remainder into lower word
002DC21C  4284                     917          clr.l   d4                      ;make sure d4 is empty
002DC21E  383C 0000                918          move.w  #0, d4                  ;move 0 into d4 
002DC222  B841                     919          cmp.w   d1, d4                  ;if equal, there is no padding
002DC224  6700 000A                920          BEQ     RUNPROGRAM              ;continue in program for special case of being divisible by 4
002DC228                           921          
002DC228                           922          
002DC228                           923  ACCOUNTFORPADDING
002DC228  9441                     924          sub.w   d1, d2                  ;subtract remainder from 4 to get padding
002DC22A  23C2 002DC24E            925          move.l  d2, Padding             ;store padding for later use
002DC230                           926          
002DC230                           927          
002DC230                           928  RUNPROGRAM       
002DC230  2428 0016                929          move.l  22(a0), d2              ;get the height of our bmp file we delared 
002DC234  E15A                     930          rol.w   #8, d2          
002DC236  4842                     931          swap    d2
002DC238  E15A                     932          rol.w   #8, d2                  ;rotate and swap long
002DC23A  2F42 0020                933          move.l  d2, 32(sp)              ;store the height of the image so that its a varible delcared and not a global image
002DC23E                           934  
002DC23E  4EB9 002DC10C            935          jsr     DrawChunk               ;we then call the subroutine of the image stack  
002DC244                           936         
002DC244  4280                     937          clr.l   d0
002DC246  7024                     938          move.l  #36, d0                
002DC248  DFC0                     939          add.l   d0, sp                  ;we finally fix the stack into screen
002DC24A                           940          
002DC24A  4287                     941          clr.l   d7
002DC24C                           942          
002DC24C  4E75                     943          rts
002DC24E                           944  
002DC24E                           945  Padding
002DC24E= 00000000                 946          dc.l    0                       ;Place the image into the centre 
002DC252                           947  
002DC252                           948  
002DC252                           949  
002DC252                           950  -------------------- end include --------------------
002DC252                           951   include "RunnerControls.x68"
002DC252                           952  
002DC252                           953  
002DC252                           954  ALL_REG                 REG     D0-D7/A0-A6
002DC252  =00000013                955  GET_KEY_INPUT_COMMAND   equ     19        
002DC252                           956  
002DC252                           957  initRunnerInput
002DC252  7420                     958          move.l          #$20,d2
002DC254                           959          
002DC254                           960  inputLoop
002DC254  4280                     961          clr.l           d0   
002DC256  103C 0013                962          move.b          #GET_KEY_INPUT_COMMAND,d0
002DC25A  2202                     963          move.l          d2,d1
002DC25C  4E4F                     964          TRAP            #15
002DC25E                           965          
002DC25E  0C01 0000                966          cmpi.b          #0,d1
002DC262  6700 0008                967          beq             noCall
002DC266  4EB9 002DC28A            968          jsr             callFunction
002DC26C                           969          
002DC26C                           970  noCall
002DC26C                           971  
002DC26C  5282                     972          add.l           #1,d2          
002DC26E                           973  
002DC26E  0C02 005A                974          cmpi.b          #$5A,d2
002DC272  66E0                     975          bne             inputLoop
002DC274  23FC 00000000 002DC5B6   976          move.l          #0, RunnerBeamPressed
002DC27E  23FC 00000000 002DC5BA   977          move.l          #0, EnemyBeamPressed
002DC288  4E75                     978          rts
002DC28A                           979          
002DC28A                           980  callFunction
002DC28A  48E7 FFFE                981          movem.l ALL_REG,-(sp)
002DC28E                           982          
002DC28E  41F9 002DC4CA            983          lea     FunctionTable,a0
002DC294  0482 00000020            984          sub.l   #$20,d2
002DC29A  E58A                     985          lsl.l   #2,d2
002DC29C  2230 2000                986          move.l  (a0,d2),d1
002DC2A0  0C81 00000000            987          cmpi.l  #0,d1
002DC2A6  6700 0006                988          beq     noFuncPtr
002DC2AA                           989  
002DC2AA  2241                     990          move.l  d1,a1
002DC2AC  4E91                     991          jsr     (a1) 
002DC2AE                           992  
002DC2AE                           993  noFuncPtr
002DC2AE  4CDF 7FFF                994          movem.l (sp)+,ALL_REG
002DC2B2  4E75                     995          rts
002DC2B4                           996  
002DC2B4                           997  
002DC2B4                           998  
002DC2B4                           999  
002DC2B4                          1000  
002DC2B4                          1001  
002DC2B4                          1002  
002DC2B4                          1003  
002DC2B4                          1004  
002DC2B4                          1005  
002DC2B4                          1006  spaceRoutine
002DC2B4  48E7 FFFE               1007          movem.l ALL_REG,-(sp)   
002DC2B8  4CDF 7FFF               1008          movem.l (sp)+,ALL_REG
002DC2BC                          1009          
002DC2BC  203C 00000226           1010          move.l  #550, d0
002DC2C2  2238 14A8               1011          move.l  RunnerY, d1
002DC2C6  E849                    1012          lsr     #FRAC_BITS, d1
002DC2C8  B280                    1013          cmp.l   d0,d1
002DC2CA  6600 0002               1014          BNE     jumpLoop
002DC2CE                          1015       
002DC2CE                          1016  jumpLoop
002DC2CE  21FC 00000000 14CC      1017          move.l  #0, RunnerVelocity
002DC2D6  2838 14A8               1018          move.l  RunnerY, d4
002DC2DA  7A32                    1019          move.l  #50, d5
002DC2DC  E94D                    1020          lsl     #FRAC_BITS, d5
002DC2DE  2C38 14A8               1021          move.l  RunnerY, d6
002DC2E2  2638 14B4               1022          move.l  RunnerSpeed, d3
002DC2E6  E94B                    1023          lsl     #FRAC_BITS, d3
002DC2E8  9C83                    1024          sub.l   d3, d6
002DC2EA  BC45                    1025          cmp     d5, d6
002DC2EC  6D00 0016               1026          BLT     spaceRoutineExit
002DC2F0                          1027          
002DC2F0  21F8 14C8 14AC          1028          move.l  RunnerJumpSprite, RunnerChunkX
002DC2F6  9883                    1029          sub.l   d3, d4
002DC2F8  21C4 14A8               1030          move.l  d4, RunnerY
002DC2FC  21FC 00000001 14B8      1031          move.l  #1, RunnerJumping
002DC304                          1032          
002DC304                          1033  spaceRoutineExit
002DC304  4E75                    1034          rts
002DC306                          1035          
002DC306                          1036  leftRoutine
002DC306  48E7 FFFE               1037          movem.l ALL_REG,-(sp)   
002DC30A  4CDF 7FFF               1038          movem.l (sp)+,ALL_REG
002DC30E  4E75                    1039          rts
002DC310                          1040  upRoutine
002DC310  48E7 FFFE               1041          movem.l ALL_REG,-(sp)   
002DC314  4CDF 7FFF               1042          movem.l (sp)+,ALL_REG
002DC318  4E75                    1043          rts 
002DC31A                          1044  rightRoutine   
002DC31A  48E7 FFFE               1045          movem.l ALL_REG,-(sp)   
002DC31E  4CDF 7FFF               1046          movem.l (sp)+,ALL_REG
002DC322  4E75                    1047          rts     
002DC324                          1048  downRoutine
002DC324  48E7 FFFE               1049          movem.l ALL_REG,-(sp)   
002DC328  4CDF 7FFF               1050          movem.l (sp)+,ALL_REG
002DC32C  4E75                    1051          rts
002DC32E                          1052  routine0
002DC32E  48E7 FFFE               1053          movem.l ALL_REG,-(sp)   
002DC332  4CDF 7FFF               1054          movem.l (sp)+,ALL_REG
002DC336  4E75                    1055          rts
002DC338                          1056  routine1
002DC338  48E7 FFFE               1057          movem.l ALL_REG,-(sp)   
002DC33C  4CDF 7FFF               1058          movem.l (sp)+,ALL_REG
002DC340  4E75                    1059          rts     
002DC342                          1060  routine2
002DC342  48E7 FFFE               1061          movem.l ALL_REG,-(sp)   
002DC346  4CDF 7FFF               1062          movem.l (sp)+,ALL_REG
002DC34A  4E75                    1063          rts     
002DC34C                          1064  routine3
002DC34C  48E7 FFFE               1065          movem.l ALL_REG,-(sp)   
002DC350  4CDF 7FFF               1066          movem.l (sp)+,ALL_REG
002DC354  4E75                    1067          rts     
002DC356                          1068  routine4
002DC356  48E7 FFFE               1069          movem.l ALL_REG,-(sp)   
002DC35A  4CDF 7FFF               1070          movem.l (sp)+,ALL_REG
002DC35E  4E75                    1071          rts     
002DC360                          1072  routine5
002DC360  48E7 FFFE               1073          movem.l ALL_REG,-(sp)   
002DC364  4CDF 7FFF               1074          movem.l (sp)+,ALL_REG
002DC368  4E75                    1075          rts
002DC36A                          1076  routine6
002DC36A  48E7 FFFE               1077          movem.l ALL_REG,-(sp)   
002DC36E  4CDF 7FFF               1078          movem.l (sp)+,ALL_REG
002DC372  4E75                    1079          rts
002DC374                          1080  routine7
002DC374  48E7 FFFE               1081          movem.l ALL_REG,-(sp)   
002DC378  4CDF 7FFF               1082          movem.l (sp)+,ALL_REG
002DC37C  4E75                    1083          rts
002DC37E                          1084  routine8
002DC37E  48E7 FFFE               1085          movem.l ALL_REG,-(sp)   
002DC382  4CDF 7FFF               1086          movem.l (sp)+,ALL_REG
002DC386  4E75                    1087          rts
002DC388                          1088  routine9
002DC388  48E7 FFFE               1089          movem.l ALL_REG,-(sp)   
002DC38C  4CDF 7FFF               1090          movem.l (sp)+,ALL_REG
002DC390  4E75                    1091          rts
002DC392                          1092  routineA
002DC392  48E7 FFFE               1093          movem.l ALL_REG,-(sp)   
002DC396  4CDF 7FFF               1094          movem.l (sp)+,ALL_REG
002DC39A  4E75                    1095          rts
002DC39C                          1096  routineB
002DC39C  48E7 FFFE               1097          movem.l ALL_REG,-(sp)   
002DC3A0  4CDF 7FFF               1098          movem.l (sp)+,ALL_REG
002DC3A4  4E75                    1099          rts
002DC3A6                          1100  routineC
002DC3A6  48E7 FFFE               1101          movem.l ALL_REG,-(sp)   
002DC3AA  4CDF 7FFF               1102          movem.l (sp)+,ALL_REG
002DC3AE  4E75                    1103          rts
002DC3B0                          1104  routineD
002DC3B0  48E7 FFFE               1105          movem.l ALL_REG,-(sp)   
002DC3B4  4CDF 7FFF               1106          movem.l (sp)+,ALL_REG
002DC3B8  4E75                    1107          rts
002DC3BA                          1108  routineE
002DC3BA  48E7 FFFE               1109          movem.l ALL_REG,-(sp)   
002DC3BE  4CDF 7FFF               1110          movem.l (sp)+,ALL_REG
002DC3C2  4E75                    1111          rts
002DC3C4                          1112  routineF
002DC3C4  48E7 FFFE               1113          movem.l ALL_REG,-(sp)   
002DC3C8  4CDF 7FFF               1114          movem.l (sp)+,ALL_REG
002DC3CC  4E75                    1115          rts
002DC3CE                          1116  routineG
002DC3CE  48E7 FFFE               1117          movem.l ALL_REG,-(sp)   
002DC3D2  4CDF 7FFF               1118          movem.l (sp)+,ALL_REG
002DC3D6  4E75                    1119          rts
002DC3D8                          1120  routineH
002DC3D8  48E7 FFFE               1121          movem.l ALL_REG,-(sp)   
002DC3DC  4CDF 7FFF               1122          movem.l (sp)+,ALL_REG
002DC3E0  4E75                    1123          rts
002DC3E2                          1124  routineI
002DC3E2  48E7 FFFE               1125          movem.l ALL_REG,-(sp)   
002DC3E6  4CDF 7FFF               1126          movem.l (sp)+,ALL_REG
002DC3EA  4E75                    1127          rts
002DC3EC                          1128  routineJ
002DC3EC  48E7 FFFE               1129          movem.l ALL_REG,-(sp)   
002DC3F0  4CDF 7FFF               1130          movem.l (sp)+,ALL_REG
002DC3F4  4E75                    1131          rts
002DC3F6                          1132  routineK
002DC3F6  48E7 FFFE               1133          movem.l ALL_REG,-(sp)   
002DC3FA  4CDF 7FFF               1134          movem.l (sp)+,ALL_REG
002DC3FE  4E75                    1135          rts
002DC400                          1136  
002DC400                          1137  routineL
002DC400  48E7 FFFE               1138          movem.l ALL_REG,-(sp)   
002DC404  4CDF 7FFF               1139          movem.l (sp)+,ALL_REG
002DC408  4E75                    1140          rts
002DC40A                          1141  
002DC40A                          1142  routineM
002DC40A  48E7 FFFE               1143          movem.l ALL_REG,-(sp)   
002DC40E  4CDF 7FFF               1144          movem.l (sp)+,ALL_REG
002DC412  4E75                    1145          rts
002DC414                          1146  
002DC414                          1147  routineN
002DC414  48E7 FFFE               1148          movem.l ALL_REG,-(sp)   
002DC418  4CDF 7FFF               1149          movem.l (sp)+,ALL_REG
002DC41C  4E75                    1150          rts
002DC41E                          1151  
002DC41E                          1152  routineO
002DC41E                          1153          *Spawn beam for player 2
002DC41E  48E7 FFFE               1154          movem.l ALL_REG,-(sp)   
002DC422  4CDF 7FFF               1155          movem.l (sp)+,ALL_REG
002DC426                          1156          *check boolean of button pressed and projectile active
002DC426  2039 002DC5BA           1157          move.l  EnemyBeamPressed, d0
002DC42C  0C80 00000000           1158          cmpi.l  #0, d0
002DC432  6600 0026               1159          BNE     routineOExit
002DC436                          1160          
002DC436  23FC 00000001 002DC5BA  1161          move.l  #1, EnemyBeamPressed
002DC440                          1162          
002DC440  2038 1512               1163          move.l  EnemyProjectileActive, d0
002DC444  0C80 00000000           1164          cmpi.l  #0, d0
002DC44A  6600 000E               1165          BNE     routineOExit
002DC44E                          1166          *update sprite
002DC44E  21F8 150A 14EA          1167          move.l  EnemyBeamSprite, EnemyChunkX
002DC454                          1168          
002DC454  4EB9 002DC728           1169          jsr     spawnEnemyProjectile
002DC45A                          1170          
002DC45A                          1171  routineOExit
002DC45A  4E75                    1172          rts
002DC45C                          1173  
002DC45C                          1174  routineP
002DC45C  48E7 FFFE               1175          movem.l ALL_REG,-(sp)   
002DC460  4CDF 7FFF               1176          movem.l (sp)+,ALL_REG
002DC464  4E75                    1177          rts
002DC466                          1178  
002DC466                          1179  routineQ
002DC466  48E7 FFFE               1180          movem.l ALL_REG,-(sp)   
002DC46A  4CDF 7FFF               1181          movem.l (sp)+,ALL_REG
002DC46E  4E75                    1182          rts
002DC470                          1183  
002DC470                          1184  routineR
002DC470  48E7 FFFE               1185          movem.l ALL_REG,-(sp)   
002DC474  4CDF 7FFF               1186          movem.l (sp)+,ALL_REG
002DC478  4E75                    1187          rts
002DC47A                          1188  
002DC47A                          1189  routineS
002DC47A  48E7 FFFE               1190          movem.l ALL_REG,-(sp)   
002DC47E  4CDF 7FFF               1191          movem.l (sp)+,ALL_REG
002DC482  4E75                    1192          rts
002DC484                          1193  
002DC484                          1194  routineT
002DC484  48E7 FFFE               1195          movem.l ALL_REG,-(sp)   
002DC488  4CDF 7FFF               1196          movem.l (sp)+,ALL_REG
002DC48C  4E75                    1197          rts
002DC48E                          1198  
002DC48E                          1199  routineU
002DC48E  48E7 FFFE               1200          movem.l ALL_REG,-(sp)   
002DC492  4CDF 7FFF               1201          movem.l (sp)+,ALL_REG
002DC496  4E75                    1202          rts
002DC498                          1203  
002DC498                          1204  routineV
002DC498                          1205  
002DC498  48E7 FFFE               1206          movem.l ALL_REG,-(sp)   
002DC49C  4CDF 7FFF               1207          movem.l (sp)+,ALL_REG
002DC4A0  4E75                    1208          rts
002DC4A2                          1209  
002DC4A2                          1210  routineW
002DC4A2  48E7 FFFE               1211          movem.l ALL_REG,-(sp)   
002DC4A6  4CDF 7FFF               1212          movem.l (sp)+,ALL_REG
002DC4AA  4E75                    1213          rts
002DC4AC                          1214  
002DC4AC                          1215  routineX
002DC4AC  48E7 FFFE               1216          movem.l ALL_REG,-(sp)   
002DC4B0  4CDF 7FFF               1217          movem.l (sp)+,ALL_REG
002DC4B4  4E75                    1218          rts
002DC4B6                          1219  
002DC4B6                          1220  routineY
002DC4B6  48E7 FFFE               1221          movem.l ALL_REG,-(sp)   
002DC4BA  4CDF 7FFF               1222          movem.l (sp)+,ALL_REG
002DC4BE  4E75                    1223          rts
002DC4C0                          1224  
002DC4C0                          1225  routineZ
002DC4C0  48E7 FFFE               1226          movem.l ALL_REG,-(sp)   
002DC4C4  4CDF 7FFF               1227          movem.l (sp)+,ALL_REG
002DC4C8  4E75                    1228          rts
002DC4CA                          1229          
002DC4CA                          1230  
002DC4CA                          1231  FunctionTable   
002DC4CA                          1232                  
002DC4CA= 002DC2B4                1233                  dc.l    spaceRoutine
002DC4CE= 00000000 00000000 ...   1234                  dc.l    0,0,0,0
002DC4DE= 002DC306 002DC310 ...   1235                  dc.l    leftRoutine,upRoutine,rightRoutine,downRoutine
002DC4EE= 00000000 00000000 ...   1236                  dc.l    0,0,0,0,0,0,0
002DC50A= 002DC32E 002DC338 ...   1237                  dc.l    routine0,routine1,routine2,routine3,routine4,routine5,routine6,routine7,routine8,routine9
002DC532= 00000000 00000000 ...   1238                  dc.l    0,0,0,0,0,0,0
002DC54E= 002DC392 002DC39C ...   1239                  dc.l    routineA,routineB,routineC,routineD,routineE,routineF,routineG
002DC56A= 002DC3D8 002DC3E2 ...   1240                  dc.l    routineH,routineI,routineJ,routineK,routineL,routineM,routineN
002DC586= 002DC41E 002DC45C ...   1241                  dc.l    routineO,routineP,routineQ,routineR,routineS,routineT,routineU
002DC5A2= 002DC498 002DC4A2 ...   1242                  dc.l    routineV,routineW,routineX,routineY,routineZ
002DC5B6                          1243                  
002DC5B6                          1244  RunnerBeamPressed
002DC5B6= 00000000                1245          dc.l    0
002DC5BA                          1246  EnemyBeamPressed
002DC5BA= 00000000                1247          dc.l    0
002DC5BE                          1248          
002DC5BE                          1249  
002DC5BE                          1250  
002DC5BE                          1251  
002DC5BE                          1252  
002DC5BE                          1253  
002DC5BE                          1254  
002DC5BE                          1255  
002DC5BE                          1256  
002DC5BE                          1257  
002DC5BE                          1258  
002DC5BE                          1259  
002DC5BE                          1260  
002DC5BE                          1261  
002DC5BE                          1262  
002DC5BE                          1263  
002DC5BE                          1264  
002DC5BE                          1265  
002DC5BE                          1266  
002DC5BE                          1267  
002DC5BE                          1268  
002DC5BE                          1269  
002DC5BE                          1270  
002DC5BE                          1271  
002DC5BE                          1272  
002DC5BE                          1273  
002DC5BE                          1274  
002DC5BE                          1275  
002DC5BE                          1276  
002DC5BE                          1277  
002DC5BE                          1278  
002DC5BE                          1279  
002DC5BE                          1280  
002DC5BE                          1281  
002DC5BE                          1282  
002DC5BE                          1283  
002DC5BE                          1284  -------------------- end include --------------------
002DC5BE                          1285   include "RunnerHealth.X68"
002DC5BE                          1286  
002DC5BE                          1287  
002DC5BE                          1288  
002DC5BE                          1289  updateHealth
002DC5BE                          1290      *get the position of the current health based on the player health passed in
002DC5BE  207C 002DC700           1291      move.l      #zeroDigit, a0
002DC5C4                          1292      *multiply digit by 4 to get correct hex number at the end of the file
002DC5C4  E588                    1293      lsl.l       #2, d0
002DC5C6  D1C0                    1294      add.l       d0, a0    
002DC5C8                          1295      *store the current hex value of health
002DC5C8  2C10                    1296      move.l      (a0), d6
002DC5CA                          1297      
002DC5CA                          1298      *Change pen to white for each segment so draw over the bacl bar
002DC5CA  7050                    1299      move.l      #80, d0
002DC5CC  223C 00FFFFFF           1300      move.l      #$00FFFFFF, d1
002DC5D2  4E4F                    1301      trap        #15
002DC5D4                          1302      
002DC5D4  7051                    1303      move.l      #81, d0
002DC5D6  223C 00FFFFFF           1304      move.l      #$00FFFFFF, d1
002DC5DC  4E4F                    1305      trap        #15
002DC5DE                          1306  
002DC5DE                          1307  
002DC5DE                          1308  GDigitRoutine
002DC5DE  2206                    1309      move.l      d6, d1     
002DC5E0  C2BC 00000001           1310      AND.l       #1, d1
002DC5E6  6700 001C               1311      BEQ         FDigitRoutine
002DC5EA  323C 0005               1312      move.w      #5, d1
002DC5EE  D285                    1313      add.l       d5, d1
002DC5F0  343C 0014               1314      move.w      #20, d2
002DC5F4  363C 0023               1315      move.w      #35, d3
002DC5F8  D685                    1316      add.l       d5, d3
002DC5FA  383C 001E               1317      move.w      #30, d4
002DC5FE  4EB9 002DC6F8           1318      jsr         DrawDigitPosition
002DC604                          1319  FDigitRoutine
002DC604  E88E                    1320      lsr.l         #4, d6
002DC606  2206                    1321      move.l      d6, d1
002DC608  C2BC 00000001           1322      AND.l       #1, d1
002DC60E  6700 001C               1323      BEQ         EDigitRoutine
002DC612  323C 0005               1324      move.w      #5, d1
002DC616  D285                    1325      add.l       d5, d1
002DC618  343C 0005               1326      move.w      #5, d2
002DC61C  363C 000F               1327      move.w      #15, d3
002DC620  D685                    1328      add.l       d5, d3
002DC622  383C 0019               1329      move.w      #25, d4
002DC626  4EB9 002DC6F8           1330      jsr         DrawDigitPosition
002DC62C                          1331  EDigitRoutine
002DC62C  E88E                    1332      lsr.l         #4, d6
002DC62E  2206                    1333      move.l      d6, d1
002DC630  C2BC 00000001           1334      AND.l       #1, d1
002DC636  6700 001C               1335      BEQ         DDigitRoutine
002DC63A  323C 0005               1336      move.w      #5, d1
002DC63E  D285                    1337      add.l       d5, d1
002DC640  343C 0019               1338      move.w      #25, d2
002DC644  363C 000F               1339      move.w      #15, d3
002DC648  D685                    1340      add.l       d5, d3
002DC64A  383C 002D               1341      move.w      #45, d4
002DC64E  4EB9 002DC6F8           1342      jsr         DrawDigitPosition
002DC654                          1343  DDigitRoutine
002DC654  E88E                    1344      lsr.l         #4, d6
002DC656  2206                    1345      move.l      d6, d1
002DC658  C2BC 00000001           1346      AND.l       #1, d1
002DC65E  6700 001C               1347      BEQ         CDigitRoutine
002DC662  323C 0005               1348      move.w      #5, d1
002DC666  D285                    1349      add.l       d5, d1
002DC668  343C 0023               1350      move.w      #35, d2
002DC66C  363C 0023               1351      move.w      #35, d3
002DC670  D685                    1352      add.l       d5, d3
002DC672  383C 002D               1353      move.w      #45, d4
002DC676  4EB9 002DC6F8           1354      jsr         DrawDigitPosition
002DC67C                          1355  CDigitRoutine
002DC67C  E88E                    1356      lsr.l         #4, d6
002DC67E  2206                    1357      move.l      d6, d1
002DC680  C2BC 00000001           1358      AND.l       #1, d1
002DC686  6700 001C               1359      BEQ         BDigitRoutine
002DC68A  323C 0019               1360      move.w      #25, d1
002DC68E  D285                    1361      add.l       d5, d1
002DC690  343C 0019               1362      move.w      #25, d2
002DC694  363C 0023               1363      move.w      #35, d3
002DC698  D685                    1364      add.l       d5, d3
002DC69A  383C 002D               1365      move.w      #45, d4
002DC69E  4EB9 002DC6F8           1366      jsr         DrawDigitPosition
002DC6A4                          1367  BDigitRoutine
002DC6A4  E88E                    1368      lsr.l         #4, d6
002DC6A6  2206                    1369      move.l      d6, d1
002DC6A8  C2BC 00000001           1370      AND.l       #1, d1
002DC6AE  6700 001C               1371      BEQ         ADigitRoutine
002DC6B2  323C 0019               1372      move.w      #25, d1
002DC6B6  D285                    1373      add.l       d5, d1
002DC6B8  343C 0005               1374      move.w      #5, d2
002DC6BC  363C 0023               1375      move.w      #35, d3
002DC6C0  D685                    1376      add.l       d5, d3
002DC6C2  383C 0019               1377      move.w      #25, d4
002DC6C6  4EB9 002DC6F8           1378      jsr         DrawDigitPosition
002DC6CC                          1379  ADigitRoutine
002DC6CC  E88E                    1380      lsr.l         #4, d6
002DC6CE  2206                    1381      move.l      d6, d1
002DC6D0  C2BC 00000001           1382      AND.l       #1, d1
002DC6D6  6700 0026               1383      BEQ         FinishHealth
002DC6DA  323C 0005               1384      move.w      #5, d1
002DC6DE  D285                    1385      add.l       d5, d1
002DC6E0  343C 0005               1386      move.w      #5, d2
002DC6E4  363C 0023               1387      move.w      #35, d3
002DC6E8  D685                    1388      add.l       d5, d3
002DC6EA  383C 000F               1389      move.w      #15, d4
002DC6EE  4EB9 002DC6F8           1390      jsr         DrawDigitPosition
002DC6F4                          1391      
002DC6F4  6000 0008               1392      BRA         FinishHealth
002DC6F8                          1393  
002DC6F8                          1394  
002DC6F8                          1395  DrawDigitPosition
002DC6F8  7057                    1396      move.l      #87, d0
002DC6FA  4E4F                    1397      trap        #15
002DC6FC  4E75                    1398      rts
002DC6FE                          1399  
002DC6FE                          1400  FinishHealth
002DC6FE  4E75                    1401      rts
002DC700                          1402  
002DC700                          1403  
002DC700                          1404  zeroDigit   
002DC700= 01111110                1405      dc.l    $01111110
002DC704                          1406  oneDigit    
002DC704= 00110000                1407      dc.l    $00110000
002DC708                          1408  twoDigit    
002DC708= 01101101                1409      dc.l    $01101101
002DC70C                          1410  threeDigit  
002DC70C= 01111001                1411      dc.l    $01111001
002DC710                          1412  fourDigit   
002DC710= 00110011                1413      dc.l    $00110011
002DC714                          1414  fiveDigit       
002DC714= 01011011                1415      dc.l    $01011011
002DC718                          1416  sixDigit    
002DC718= 01011111                1417      dc.l    $01011111
002DC71C                          1418  sevenDigit  
002DC71C= 01110000                1419      dc.l    $01110000
002DC720                          1420  eightDigit  
002DC720= 01111111                1421      dc.l    $01111111
002DC724                          1422  nineDigit   
002DC724= 01111011                1423      dc.l    $01111011
002DC728                          1424  
002DC728                          1425  
002DC728                          1426  
002DC728                          1427  -------------------- end include --------------------
002DC728                          1428   include "EnemyProjectileRunning.X68"
002DC728                          1429  
002DC728                          1430  spawnEnemyProjectile
002DC728  21FC 00000001 1512      1431      move.l  #1, EnemyProjectileActive
002DC730  2238 14FE               1432      move.l  EnemyLeft, d1
002DC734  0C81 00000001           1433      cmpi.l  #1, d1
002DC73A  6700 006C               1434      BEQ     spawnEnemyProjectileLeft
002DC73E                          1435  spawnEnemyProjectileRight
002DC73E  21FC 00000000 1516      1436      move.l  #0, EnemyProjectileLeft
002DC746                          1437  
002DC746                          1438  
002DC746  2038 14EE               1439      move.l  EnemyChunkY, d0
002DC74A  0C80 00000000           1440      cmpi.l  #0, d0
002DC750  6700 0006               1441      BEQ     drawTinyEnemyProjectileRight
002DC754                          1442      
002DC754                          1443   
002DC754                          1444      
002DC754  6000 0008               1445      BRA     drawEnemyProjectileRight
002DC758                          1446      
002DC758                          1447      
002DC758                          1448  drawTinyEnemyProjectileRight
002DC758  41F9 002A7976           1449      lea     smallBeam, a0
002DC75E                          1450      
002DC75E                          1451  
002DC75E                          1452      
002DC75E                          1453  drawEnemyProjectileRight
002DC75E  2238 151A               1454      move.l  EnemyProjectileWidth, d1
002DC762  2438 151E               1455      move.l  EnemyProjectileHeight, d2
002DC766  21F8 14E2 1522          1456      move.l  EnemyX, EnemyProjectileX
002DC76C  2038 1522               1457      move.l  EnemyProjectileX, d0
002DC770  D0B8 14DA               1458      add.l   EnemyWidth, d0
002DC774  21C0 1522               1459      move.l  d0, EnemyProjectileX
002DC778  2638 1522               1460      move.l  EnemyProjectileX, d3
002DC77C  2838 14E6               1461      move.l  EnemyY, d4
002DC780  E88C                    1462      lsr.l   #4, d4
002DC782  21C4 1526               1463      move.l  d4, EnemyProjectileY
002DC786  2A38 152A               1464      move.l  EnemyProjectileYOffset,d5
002DC78A  DBB8 1526               1465      add.l   d5, EnemyProjectileY
002DC78E  2838 1526               1466      move.l  EnemyProjectileY, d4
002DC792  21F8 151A 152E          1467      move.l  EnemyProjectileWidth, EnemyProjectileChunkX
002DC798  2A38 152E               1468      move.l  EnemyProjectileChunkX, d5
002DC79C  2C38 1532               1469      move.l  EnemyProjectileChunkY, d6
002DC7A0  4EB9 002DC1DA           1470      jsr     DRAWIMAGE
002DC7A6  4E75                    1471      rts
002DC7A8                          1472      
002DC7A8                          1473  spawnEnemyProjectileLeft
002DC7A8  21FC 00000001 1516      1474      move.l  #1, EnemyProjectileLeft
002DC7B0  2038 14EE               1475      move.l  EnemyChunkY, d0
002DC7B4  0C80 00000000           1476      cmpi.l  #0, d0
002DC7BA  6700 0006               1477      BEQ     drawTinyEnemyProjectileLeft
002DC7BE                          1478      
002DC7BE                          1479      
002DC7BE                          1480      
002DC7BE  6000 0008               1481      BRA     drawEnemyProjectileLeft
002DC7C2                          1482      
002DC7C2                          1483      
002DC7C2                          1484  drawTinyEnemyProjectileLeft
002DC7C2  41F9 002A7976           1485      lea     smallBeam, a0
002DC7C8                          1486   
002DC7C8                          1487  
002DC7C8                          1488  drawEnemyProjectileLeft
002DC7C8  2238 151A               1489      move.l  EnemyProjectileWidth, d1
002DC7CC  2438 151E               1490      move.l  EnemyProjectileHeight, d2
002DC7D0  21F8 14E2 1522          1491      move.l  EnemyX, EnemyProjectileX
002DC7D6  2038 1522               1492      move.l  EnemyProjectileX, d0
002DC7DA  90B8 151A               1493      sub.l   EnemyProjectileWidth, d0
002DC7DE  21C0 1522               1494      move.l  d0, EnemyProjectileX
002DC7E2  2638 1522               1495      move.l  EnemyProjectileX, d3
002DC7E6  2838 14E6               1496      move.l  EnemyY, d4
002DC7EA  E88C                    1497      lsr.l   #FRAC_BITS, d4
002DC7EC  21C4 1526               1498      move.l  d4, EnemyProjectileY
002DC7F0  2A38 152A               1499      move.l  EnemyProjectileYOffset,d5
002DC7F4  DBB8 1526               1500      add.l   d5, EnemyProjectileY
002DC7F8  2838 1526               1501      move.l  EnemyProjectileY, d4
002DC7FC  21FC 00000000 152E      1502      move.l  #0, EnemyProjectileChunkX
002DC804  2A38 152E               1503      move.l  EnemyProjectileChunkX, d5
002DC808  2C38 1532               1504      move.l  EnemyProjectileChunkY, d6
002DC80C  4EB9 002DC1DA           1505      jsr     DRAWIMAGE
002DC812  4E75                    1506      rts
002DC814                          1507  
002DC814                          1508      
002DC814                          1509      
002DC814                          1510  updateProjectilesBackground
002DC814  2038 1512               1511      move.l  EnemyProjectileActive, d0
002DC818  0C80 00000001           1512      cmpi.l  #1, d0
002DC81E  6600 00FC               1513      BNE     exitProjectileUpdate
002DC822                          1514  
002DC822  41F8 1586               1515      lea     BackGround, a0
002DC826  2238 151A               1516      move.l  EnemyProjectileWidth, d1
002DC82A  2438 151E               1517      move.l  EnemyProjectileHeight, d2
002DC82E  2638 1522               1518      move.l  EnemyProjectileX, d3
002DC832  2838 1526               1519      move.l  EnemyProjectileY, d4
002DC836  2A38 1522               1520      move.l  EnemyProjectileX, d5
002DC83A  2C38 1526               1521      move.l  EnemyProjectileY, d6
002DC83E  4EB9 002DC1DA           1522      jsr     DRAWIMAGE
002DC844                          1523      
002DC844  2038 1512               1524      move.l  EnemyProjectileActive, d0
002DC848  0C80 00000001           1525      cmpi.l  #1, d0
002DC84E  6600 00CC               1526      BNE     exitProjectileUpdate
002DC852                          1527  
002DC852  2038 1516               1528      move.l  EnemyProjectileLeft, d0
002DC856  0C80 00000001           1529      cmpi.l  #1, d0
002DC85C  6600 0062               1530      BNE     updateProjectile2PositionRight
002DC860                          1531  
002DC860                          1532  updateProjectile2PositionLeft
002DC860                          1533      
002DC860                          1534      
002DC860  2038 1522               1535      move.l  EnemyProjectileX, d0
002DC864  90B8 1542               1536      sub.l   ProjectileSpeed, d0
002DC868  21C0 1522               1537      move.l  d0, EnemyProjectileX
002DC86C                          1538  
002DC86C  2038 1522               1539      move.l  EnemyProjectileX, d0
002DC870  D0B8 151A               1540      add.l   EnemyProjectileWidth, d0
002DC874  0C80 00000000           1541      cmpi.l  #0, d0
002DC87A  6E00 0066               1542      BGT     moveProjectile2Right
002DC87E                          1543      
002DC87E  21FC 00000000 1512      1544      move.l  #0, EnemyProjectileActive
002DC886                          1545  
002DC886                          1546  moveProjectile2Left
002DC886  2038 14EE               1547      move.l  EnemyChunkY, d0
002DC88A  0C80 00000000           1548      cmpi.l  #0, d0
002DC890  6700 0006               1549      BEQ     updateTinyEnemyProjectileLeft
002DC894                          1550      
002DC894                          1551  
002DC894  6000 0008               1552      BRA     updateDrawProjectile2Left
002DC898                          1553      
002DC898                          1554  updateTinyEnemyProjectileLeft
002DC898  41F9 002A7976           1555      lea     smallBeam, a0
002DC89E                          1556  
002DC89E                          1557  updateDrawProjectile2Left
002DC89E  2238 151A               1558      move.l  EnemyProjectileWidth, d1
002DC8A2  2438 151E               1559      move.l  EnemyProjectileHeight, d2
002DC8A6  2638 1522               1560      move.l  EnemyProjectileX, d3
002DC8AA  2838 1526               1561      move.l  EnemyProjectileY, d4
002DC8AE  2A38 152E               1562      move.l  EnemyProjectileChunkX, d5
002DC8B2  2C38 1532               1563      move.l  EnemyProjectileChunkY, d6
002DC8B6  4EB9 002DC1DA           1564      jsr     DRAWIMAGE
002DC8BC                          1565      
002DC8BC  6000 005E               1566      BRA     exitProjectileUpdate
002DC8C0                          1567      
002DC8C0                          1568  updateProjectile2PositionRight   
002DC8C0  2038 1522               1569      move.l  EnemyProjectileX, d0
002DC8C4  D0B8 1542               1570      add.l   ProjectileSpeed, d0
002DC8C8  21C0 1522               1571      move.l  d0, EnemyProjectileX
002DC8CC                          1572  
002DC8CC  2038 1522               1573      move.l  EnemyProjectileX, d0
002DC8D0  0C80 000002BC           1574      cmpi.l  #700, d0
002DC8D6  6D00 000A               1575      BLT     moveProjectile2Right
002DC8DA                          1576      
002DC8DA  21FC 00000000 1512      1577      move.l  #0, EnemyProjectileActive
002DC8E2                          1578  
002DC8E2                          1579  moveProjectile2Right
002DC8E2  2038 14EE               1580      move.l  EnemyChunkY, d0
002DC8E6  0C80 00000000           1581      cmpi.l  #0, d0
002DC8EC  6700 0006               1582      BEQ     updateTinyEnemyProjectileRight
002DC8F0                          1583      
002DC8F0                          1584  
002DC8F0  6000 0008               1585      BRA     updateDrawProjectile2Right
002DC8F4                          1586      
002DC8F4                          1587  updateTinyEnemyProjectileRight
002DC8F4  41F9 002A7976           1588      lea     smallBeam, a0
002DC8FA                          1589  
002DC8FA                          1590  updateDrawProjectile2Right
002DC8FA  2238 151A               1591      move.l  EnemyProjectileWidth, d1
002DC8FE  2438 151E               1592      move.l  EnemyProjectileHeight, d2
002DC902  2638 1522               1593      move.l  EnemyProjectileX, d3
002DC906  2838 1526               1594      move.l  EnemyProjectileY, d4
002DC90A  2A38 152E               1595      move.l  EnemyProjectileChunkX, d5
002DC90E  2C38 1532               1596      move.l  EnemyProjectileChunkY, d6
002DC912  4EB9 002DC1DA           1597      jsr     DRAWIMAGE
002DC918                          1598      
002DC918  6000 0002               1599      BRA     exitProjectileUpdate
002DC91C                          1600      
002DC91C                          1601      
002DC91C                          1602      
002DC91C                          1603  exitProjectileUpdate
002DC91C  4E75                    1604      rts
002DC91E                          1605  
002DC91E                          1606   
002DC91E                          1607  
002DC91E                          1608  
002DC91E                          1609  
002DC91E                          1610  
002DC91E                          1611  
002DC91E                          1612  
002DC91E                          1613  
002DC91E                          1614  
002DC91E                          1615  
002DC91E                          1616  
002DC91E                          1617  
002DC91E                          1618  
002DC91E                          1619  
002DC91E                          1620  
002DC91E                          1621  
002DC91E                          1622  
002DC91E                          1623  -------------------- end include --------------------
002DC91E                          1624   include "EnemyProjectileCollide.X68"
002DC91E                          1625  CheckProjectileCollision
002DC91E                          1626  
002DC91E                          1627  EnemyBeamCollisionDetection
002DC91E                          1628      *check and see if the projectile collided
002DC91E  0C81 00000001           1629      cmpi.l  #1, d1
002DC924  6600 0032               1630      BNE     RunnerBeamCollisionDetection
002DC928                          1631  
002DC928  2238 14E2               1632      move.l  EnemyX, d1
002DC92C  2438 14E6               1633      move.l  EnemyY, d2
002DC930                          1634      *Use lsr to shift the pixel bits into d2
002DC930  E88A                    1635      lsr.l   #FRAC_BITS, d2
002DC932                          1636  
002DC932  D2B8 14DA               1637      add.l   EnemyWidth, d1 
002DC936  B641                    1638      cmp     d1, d3
002DC938  6E00 001E               1639      BGT     RunnerBeamCollisionDetection
002DC93C                          1640      
002DC93C  92B8 14DA               1641      sub.l   EnemyWidth, d1
002DC940                          1642  
002DC940  B641                    1643      cmp     d1, d3
002DC942  6DDA                    1644      BLT     EnemyBeamCollisionDetection
002DC944                          1645      
002DC944  D4B8 14DE               1646      add.l   EnemyHeight, d2
002DC948  B842                    1647      cmp     d2, d4
002DC94A  6E00 000C               1648      BGT     RunnerBeamCollisionDetection
002DC94E                          1649      
002DC94E  94B8 14DE               1650      sub.l   EnemyHeight, d2
002DC952                          1651  
002DC952  B842                    1652      cmp     d2, d4
002DC954  6D00 0002               1653      BLT     RunnerBeamCollisionDetection
002DC958                          1654      *check if any colliding happens on the screen if so and it hits the player we allow the enemy to spawn another
002DC958                          1655  
002DC958                          1656  
002DC958                          1657  RunnerBeamCollisionDetection
002DC958  2238 1512               1658      move.l  EnemyProjectileActive, d1
002DC95C  0C81 00000001           1659      cmpi.l  #1, d1
002DC962  6600 004A               1660      BNE     BeamToBeamCollisionDetection
002DC966                          1661  
002DC966  2238 14A4               1662      move.l  RunnerX, d1
002DC96A  2438 14A8               1663      move.l  RunnerY, d2
002DC96E  E88A                    1664      lsr.l   #FRAC_BITS, d2
002DC970  2638 1522               1665      move.l  EnemyProjectileX, d3
002DC974  2838 1526               1666      move.l  EnemyProjectileY, d4
002DC978                          1667      
002DC978  D2B8 149C               1668      add.l   RunnerWidth, d1 
002DC97C  B641                    1669      cmp     d1, d3
002DC97E  6E00 002E               1670      BGT     BeamToBeamCollisionDetection
002DC982                          1671      
002DC982  92B8 149C               1672      sub.l   RunnerWidth, d1
002DC986  D6B8 151A               1673      add.l   EnemyProjectileWidth, d3
002DC98A  B641                    1674      cmp     d1, d3
002DC98C  6D00 0020               1675      BLT     BeamToBeamCollisionDetection
002DC990                          1676      
002DC990  D4B8 14A0               1677      add.l   RunnerHeight, d2
002DC994  B842                    1678      cmp     d2, d4
002DC996  6E00 0016               1679      BGT     BeamToBeamCollisionDetection
002DC99A                          1680      
002DC99A  94B8 14A0               1681      sub.l   RunnerHeight, d2
002DC99E  D8B8 151E               1682      add.l   EnemyProjectileHeight, d4
002DC9A2  B842                    1683      cmp     d2, d4
002DC9A4  6D00 0008               1684      BLT     BeamToBeamCollisionDetection
002DC9A8  4EB9 002DC9F2           1685      jsr     BeamHitRunner
002DC9AE                          1686  
002DC9AE                          1687  BeamToBeamCollisionDetection
002DC9AE  2238 1512               1688      move.l  EnemyProjectileActive, d1
002DC9B2  0C81 00000001           1689      cmpi.l  #1, d1
002DC9B8  6600 00E6               1690      BNE     exitBeamCollisionDetection
002DC9BC                          1691      
002DC9BC                          1692  
002DC9BC  0C81 00000001           1693      cmpi.l  #1, d1
002DC9C2  6600 00DC               1694      BNE     exitBeamCollisionDetection
002DC9C6                          1695  
002DC9C6                          1696  
002DC9C6                          1697  
002DC9C6  2638 1522               1698      move.l  EnemyProjectileX, d3
002DC9CA  2838 1526               1699      move.l  EnemyProjectileY, d4
002DC9CE                          1700      
002DC9CE                          1701  
002DC9CE  B641                    1702      cmp     d1, d3
002DC9D0  6E00 00CE               1703      BGT     exitBeamCollisionDetection
002DC9D4                          1704      
002DC9D4                          1705  
002DC9D4  D6B8 151A               1706      add.l   EnemyProjectileWidth, d3
002DC9D8  B641                    1707      cmp     d1, d3
002DC9DA  6D00 00C4               1708      BLT     exitBeamCollisionDetection
002DC9DE                          1709      
002DC9DE                          1710  
002DC9DE  B842                    1711      cmp     d2, d4
002DC9E0  6E00 00BE               1712      BGT     exitBeamCollisionDetection
002DC9E4                          1713      
002DC9E4                          1714  
002DC9E4  D8B8 151E               1715      add.l   EnemyProjectileHeight, d4
002DC9E8  B842                    1716      cmp     d2, d4
002DC9EA  6D00 00B4               1717      BLT     exitBeamCollisionDetection    
002DC9EE  6000 0070               1718      BRA     BeamsCollided
002DC9F2                          1719  
002DC9F2                          1720  BeamHitRunner
002DC9F2                          1721      *If Runner has been hit take away 1 from health
002DC9F2  2238 14BC               1722      move.l  RunnerHealth, d1
002DC9F6  92B8 1536               1723      sub.l   EnemyProjectileDamage, d1
002DC9FA                          1724      *check if his health is at 0
002DC9FA  0C81 00000000           1725      cmpi.l  #0, d1
002DCA00  6C00 0008               1726      BGE     ContinueBeamHitRunner
002DCA04                          1727      *if its at 0 print 0 to the screen
002DCA04  4EB9 002DCAA2           1728      jsr     SetHealthToZero
002DCA0A                          1729  ContinueBeamHitRunner  
002DCA0A  21C1 14BC               1730      move.l  d1, RunnerHealth
002DCA0E  21F8 14D4 14AC          1731      move.l  RunnerDamageSprite, RunnerChunkX    
002DCA14  21FC 00000000 1512      1732      move.l  #0, EnemyProjectileActive
002DCA1C                          1733      
002DCA1C                          1734      *redraw background behind player after the sprite has occured
002DCA1C  41F8 1586               1735      lea     BackGround, a0
002DCA20  2238 151A               1736      move.l  EnemyProjectileWidth, d1
002DCA24  2438 151E               1737      move.l  EnemyProjectileHeight, d2
002DCA28  2638 1522               1738      move.l  EnemyProjectileX, d3
002DCA2C  2838 1526               1739      move.l  EnemyProjectileY, d4
002DCA30  2A38 1522               1740      move.l  EnemyProjectileX, d5
002DCA34  2C38 1526               1741      move.l  EnemyProjectileY, d6
002DCA38  4EB9 002DC1DA           1742      jsr     DRAWIMAGE
002DCA3E                          1743      *draw updated score for runner
002DCA3E  4EB8 13FA               1744      jsr     updateScoreBackGround
002DCA42  2038 14BC               1745      move.l  RunnerHealth, d0
002DCA46  2A38 14D0               1746      move.l  RunnerScoreX, d5
002DCA4A  4EB9 002DC5BE           1747      jsr     updateHealth
002DCA50                          1748     
002DCA50                          1749      
002DCA50                          1750      *spawn sound of runner that was hit after being hit
002DCA50  43F8 157A               1751      lea     GetHit, a1
002DCA54  7200                    1752      move.l  #0,d1
002DCA56  7400                    1753      move.l  #0,d2
002DCA58  7049                    1754      move.l  #73,d0
002DCA5A  4E4F                    1755      Trap    #15
002DCA5C                          1756      
002DCA5C  6000 0042               1757      bra     exitBeamCollisionDetection
002DCA60                          1758  
002DCA60                          1759  
002DCA60                          1760  BeamsCollided
002DCA60                          1761  
002DCA60                          1762      
002DCA60  41F8 1586               1763      lea     BackGround, a0
002DCA64                          1764      
002DCA64  4EB9 002DC1DA           1765      jsr     DRAWIMAGE
002DCA6A                          1766      
002DCA6A  21FC 00000000 1512      1767      move.l  #0, EnemyProjectileActive
002DCA72                          1768      
002DCA72  41F8 1586               1769      lea     BackGround, a0
002DCA76  2238 151A               1770      move.l  EnemyProjectileWidth, d1
002DCA7A  2438 151E               1771      move.l  EnemyProjectileHeight, d2
002DCA7E  2638 1522               1772      move.l  EnemyProjectileX, d3
002DCA82  2838 1526               1773      move.l  EnemyProjectileY, d4
002DCA86  2A38 1522               1774      move.l  EnemyProjectileX, d5
002DCA8A  2C38 1526               1775      move.l  EnemyProjectileY, d6
002DCA8E  4EB9 002DC1DA           1776      jsr     DRAWIMAGE
002DCA94                          1777      
002DCA94                          1778  COLLISION_CHECK_DONE:               ; No Collision Update points
002DCA94  5201                    1779      ADD.B   #POINTS,    D1          ; Move points upgrade to D1
002DCA96  D2B8 14D8               1780      ADD.L   PLAYER_SCORE,D1         ; Add to current player score
002DCA9A  21C1 14D8               1781      MOVE.L  D1, PLAYER_SCORE        ; Update player score in memory
002DCA9E  4E75                    1782      RTS                             ; Return to subrouti
002DCAA0                          1783      
002DCAA0                          1784  exitBeamCollisionDetection
002DCAA0  4E75                    1785      rts
002DCAA2                          1786      
002DCAA2                          1787  SetHealthToZero
002DCAA2  7200                    1788      move.l  #0, d1
002DCAA4  4E75                    1789      rts
002DCAA6                          1790  
002DCAA6                          1791  
002DCAA6                          1792  
002DCAA6                          1793  
002DCAA6                          1794  
002DCAA6                          1795  
002DCAA6                          1796  
002DCAA6                          1797  
002DCAA6                          1798  
002DCAA6                          1799  
002DCAA6                          1800  
002DCAA6                          1801  
002DCAA6                          1802  
002DCAA6                          1803  
002DCAA6                          1804  
002DCAA6                          1805  
002DCAA6                          1806  
002DCAA6                          1807  
002DCAA6                          1808  
002DCAA6                          1809  
002DCAA6                          1810  
002DCAA6                          1811  
002DCAA6                          1812  -------------------- end include --------------------
002DCAA6                          1813   include "RunnerGravity.X68"
002DCAA6                          1814  
002DCAA6                          1815  updateRunnerGravity
002DCAA6  4EB9 002DCABA           1816          jsr     RunnerGravityRoutine
002DCAAC  4EB9 002DCB18           1817          jsr     checkForRunnerGround
002DCAB2  4EB9 002DCB54           1818          jsr     checkForEnemyGround
002DCAB8  4E75                    1819          rts
002DCABA                          1820  
002DCABA                          1821  RunnerGravityRoutine
002DCABA  103C 0013               1822          move.b          #GET_KEY_INPUT_COMMAND,d0
002DCABE  7220                    1823          move.l          #SPACE_KEY,d1
002DCAC0  4E4F                    1824          TRAP            #15
002DCAC2  0C01 0000               1825          cmpi.b          #0,d1
002DCAC6  6600 008A               1826          bne             exitGravity
002DCACA  2A38 14B8               1827          move.l          RunnerJumping, d5
002DCACE  0C85 00000001           1828          cmpi.l          #1, d5
002DCAD4  103C 0013               1829          move.b          #GET_KEY_INPUT_COMMAND,d0
002DCAD8  7241                    1830          move.l          #$41,d1
002DCADA  4E4F                    1831          TRAP            #15
002DCADC  0C01 0000               1832          cmpi.b          #0,d1
002DCAE0  6600 0018               1833          bne             applyRunnerGravity
002DCAE4                          1834          
002DCAE4  103C 0013               1835          move.b          #GET_KEY_INPUT_COMMAND,d0
002DCAE8  7244                    1836          move.l          #$44,d1
002DCAEA  4E4F                    1837          TRAP            #15
002DCAEC  0C01 0000               1838          cmpi.b          #0,d1
002DCAF0  6600 0008               1839          bne             applyRunnerGravity
002DCAF4                          1840          
002DCAF4  21F8 14C8 14AC          1841          move.l          RunnerJumpSprite, RunnerChunkX
002DCAFA                          1842  
002DCAFA                          1843  applyRunnerGravity
002DCAFA  2038 14CC               1844          move.l          RunnerVelocity, d0
002DCAFE  223C 0000009C           1845          move.l          #Gravity, d1
002DCB04  D081                    1846          add.l           d1, d0
002DCB06  21C0 14CC               1847          move.l          d0, RunnerVelocity        
002DCB0A  2838 14A8               1848          move.l          RunnerY, d4
002DCB0E  D8B8 14CC               1849          add.l           RunnerVelocity, d4
002DCB12  21C4 14A8               1850          move.l          d4, RunnerY
002DCB16  4E75                    1851          rts
002DCB18                          1852  checkForRunnerGround
002DCB18                          1853  
002DCB18  2838 14A8               1854      move.l  RunnerY, d4
002DCB1C  D8B8 14CC               1855      add.l   RunnerVelocity, d4
002DCB20                          1856  
002DCB20  E84C                    1857      lsr     #FRAC_BITS, d4
002DCB22  2A38 153E               1858      move.l  Ground, d5
002DCB26  B845                    1859      cmp     d5, d4
002DCB28  6E00 0004               1860      BGT     setRunnerGround     
002DCB2C                          1861      
002DCB2C                          1862  returnRunnerGround    
002DCB2C  4E75                    1863      rts
002DCB2E                          1864  
002DCB2E                          1865  setRunnerGround
002DCB2E  21FC 00000000 14CC      1866      move.l  #0, RunnerVelocity
002DCB36  21F8 14C4 14AC          1867      move.l  RunnerIdleSprite, RunnerChunkX
002DCB3C  4EB8 1390               1868      jsr     updatePlayersBackGrounds
002DCB40  2838 153E               1869      move.l  Ground, d4
002DCB44  E94C                    1870      lsl     #FRAC_BITS, d4
002DCB46  21C4 14A8               1871      move.l  d4, RunnerY
002DCB4A  21FC 00000000 14B8      1872      move.l  #0, RunnerJumping       
002DCB52                          1873          
002DCB52                          1874  
002DCB52                          1875  exitGravity
002DCB52  4E75                    1876          rts
002DCB54                          1877  
002DCB54                          1878  checkForEnemyGround
002DCB54  2838 14E6               1879      move.l  EnemyY, d4
002DCB58  D8B8 153A               1880      add.l   EnemyVelocity, d4
002DCB5C  E84C                    1881      lsr     #FRAC_BITS, d4
002DCB5E  2A38 153E               1882      move.l  Ground, d5
002DCB62                          1883  
002DCB62  5B85                    1884      sub.l   #5, d5
002DCB64  B845                    1885      cmp     d5, d4
002DCB66  6E00 0004               1886      BGT     setEnemyGround     
002DCB6A                          1887  
002DCB6A                          1888  returnEnemyGround    
002DCB6A  4E75                    1889      rts
002DCB6C                          1890      
002DCB6C                          1891  setEnemyGround
002DCB6C  21FC 00000000 153A      1892      move.l  #0, EnemyVelocity
002DCB74  21F8 1502 14EA          1893      move.l  EnemyIdleSprite, EnemyChunkX
002DCB7A  4EB8 1390               1894      jsr     updatePlayersBackGrounds
002DCB7E  2838 153E               1895      move.l  Ground, d4
002DCB82  0484 0000000A           1896      sub.l   #10, d4
002DCB88  E94C                    1897      lsl     #FRAC_BITS, d4
002DCB8A  21C4 14E6               1898      move.l  d4, EnemyY
002DCB8E                          1899  
002DCB8E                          1900      
002DCB8E                          1901  
002DCB8E  7200                    1902      move.l  #0,d1
002DCB90  7400                    1903      move.l  #0,d2
002DCB92  7049                    1904      move.l  #73,d0
002DCB94  4E4F                    1905      Trap    #15
002DCB96                          1906      
002DCB96  60D2                    1907      bra     returnEnemyGround
002DCB98                          1908  
002DCB98                          1909  
002DCB98                          1910  -------------------- end include --------------------
002DCB98                          1911      
002DCB98                          1912     
002DCB98                          1913  
002DCB98                          1914  QUIT
002DCB98                          1915      END    START  

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACCOUNTFORPADDING   2DC228
ADIGITROUTINE       2DC6CC
ALL_REG             7FFF
APPLYRUNNERGRAVITY  2DCAFA
BACKGROUND          1586
BDIGITROUTINE       2DC6A4
BEAMHITRUNNER       2DC9F2
BEAMSCOLLIDED       2DCA60
BEAMTOBEAMCOLLISIONDETECTION  2DC9AE
CALLFUNCTION        2DC28A
CDIGITROUTINE       2DC67C
CHECKFORENEMYGROUND  2DCB54
CHECKFORRUNNERGROUND  2DCB18
CHECKPROJECTILECOLLISION  2DC91E
COLLISION_CHECK_DONE  2DCA94
CONTINUEBEAMHITRUNNER  2DCA0A
DDIGITROUTINE       2DC654
DEADRUNNER          2DAF06
DOWNROUTINE         2DC324
DRAWCHUNK           2DC10C
DRAWDIGITPOSITION   2DC6F8
DRAWENEMYCALL       133E
DRAWENEMYPROJECTILELEFT  2DC7C8
DRAWENEMYPROJECTILERIGHT  2DC75E
DRAWIMAGE           2DC1DA
DRAWPIXEL           2DC1C0
DRAWPIXELCODE       52
DRAWPLAYERS         1430
DRAWRUNNERCALL      130A
DRAWRUNNERHEALTH    1372
DRAWTINYENEMYPROJECTILELEFT  2DC7C2
DRAWTINYENEMYPROJECTILERIGHT  2DC758
EDIGITROUTINE       2DC62C
EIGHTDIGIT          2DC720
ENDGAME             2A7A80
ENDROUTINE          2DC1D8
ENEMY               28E6DA
ENEMYBEAMCOLLISIONDETECTION  2DC91E
ENEMYBEAMPRESSED    2DC5BA
ENEMYBEAMSPRITE     150A
ENEMYCHUNKX         14EA
ENEMYCHUNKY         14EE
ENEMYDAMAGESPRITE   150E
ENEMYHEALTH         14FA
ENEMYHEIGHT         14DE
ENEMYIDLESPRITE     1502
ENEMYJUMPING        14F6
ENEMYJUMPSPRITE     1506
ENEMYLEFT           14FE
ENEMYPROJECTILEACTIVE  1512
ENEMYPROJECTILECHUNKX  152E
ENEMYPROJECTILECHUNKY  1532
ENEMYPROJECTILEDAMAGE  1536
ENEMYPROJECTILEHEIGHT  151E
ENEMYPROJECTILELEFT  1516
ENEMYPROJECTILEWIDTH  151A
ENEMYPROJECTILEX    1522
ENEMYPROJECTILEY    1526
ENEMYPROJECTILEYOFFSET  152A
ENEMYSPEED          14F2
ENEMYSTARTSPRITEX   81
ENEMYVELOCITY       153A
ENEMYWIDTH          14DA
ENEMYX              14E2
ENEMYY              14E6
EXITBEAMCOLLISIONDETECTION  2DCAA0
EXITGRAVITY         2DCB52
EXITPROJECTILEUPDATE  2DC91C
FDIGITROUTINE       2DC604
FINISHHEALTH        2DC6FE
FIVEDIGIT           2DC714
FOURDIGIT           2DC710
FRAC_BITS           4
FUNCTIONTABLE       2DC4CA
GAMELOOP            11F0
GAMEOVER            156A
GAMEOVER0           1264
GAMEOVERLOOP        12EE
GDIGITROUTINE       2DC5DE
GETHIT              157A
GET_KEY_INPUT_COMMAND  13
GET_USER_INPUT_COMMAND  13
GRAVITY             9C
GROUND              153E
INCREMENT           2DC17E
INCREMENTY          2DC1B2
INITRUNNERINPUT     2DC252
INNERLOOP           2DC150
INPUTLOOP           2DC254
JUMPLOOP            2DC2CE
LEFTROUTINE         2DC306
LOADINGIMAGE        134FF0
MOVEPROJECTILE2LEFT  2DC886
MOVEPROJECTILE2RIGHT  2DC8E2
NINEDIGIT           2DC724
NOCALL              2DC26C
NOFUNCPTR           2DC2AE
ONEDIGIT            2DC704
OUTERLOOP           2DC142
PADDING             2DC24E
PENCOLORCODE        50
PLAYER_SCORE        14D8
POINTS              1
PROJECTILESPEED     1542
QUIT                2DCB98
RESETVARIABLES      105A
RETURNENEMYGROUND   2DCB6A
RETURNRUNNERGROUND  2DCB2C
RIGHTROUTINE        2DC31A
ROUTINE0            2DC32E
ROUTINE1            2DC338
ROUTINE2            2DC342
ROUTINE3            2DC34C
ROUTINE4            2DC356
ROUTINE5            2DC360
ROUTINE6            2DC36A
ROUTINE7            2DC374
ROUTINE8            2DC37E
ROUTINE9            2DC388
ROUTINEA            2DC392
ROUTINEB            2DC39C
ROUTINEC            2DC3A6
ROUTINED            2DC3B0
ROUTINEE            2DC3BA
ROUTINEF            2DC3C4
ROUTINEG            2DC3CE
ROUTINEH            2DC3D8
ROUTINEI            2DC3E2
ROUTINEJ            2DC3EC
ROUTINEK            2DC3F6
ROUTINEL            2DC400
ROUTINEM            2DC40A
ROUTINEN            2DC414
ROUTINEO            2DC41E
ROUTINEOEXIT        2DC45A
ROUTINEP            2DC45C
ROUTINEQ            2DC466
ROUTINER            2DC470
ROUTINES            2DC47A
ROUTINET            2DC484
ROUTINEU            2DC48E
ROUTINEV            2DC498
ROUTINEW            2DC4A2
ROUTINEX            2DC4AC
ROUTINEY            2DC4B6
ROUTINEZ            2DC4C0
RUNNER              27C9A4
RUNNERBEAMCOLLISIONDETECTION  2DC958
RUNNERBEAMPRESSED   2DC5B6
RUNNERCHUNKX        14AC
RUNNERCHUNKY        14B0
RUNNERDAMAGESPRITE  14D4
RUNNERGRAVITYROUTINE  2DCABA
RUNNERHEALTH        14BC
RUNNERHEALTHIMAGE   2A0410
RUNNERHEIGHT        14A0
RUNNERIDLESPRITE    14C4
RUNNERJUMPING       14B8
RUNNERJUMPSPRITE    14C8
RUNNERLEFT          14C0
RUNNERSCOREX        14D0
RUNNERSPEED         14B4
RUNNERSTARTSPRITEX  A0
RUNNERVELOCITY      14CC
RUNNERWIDTH         149C
RUNNERX             14A4
RUNNERY             14A8
RUNNINGMUSIC        155A
RUNPROGRAM          2DC230
SCREENCHANGECODE    21
SETENEMYGROUND      2DCB6C
SETHEALTHTOZERO     2DCAA2
SETRUNNERGROUND     2DCB2E
SEVENDIGIT          2DC71C
SIXDIGIT            2DC718
SMALLBEAM           2A7976
SPACEROUTINE        2DC2B4
SPACEROUTINEEXIT    2DC304
SPACE_KEY           20
SPAWNENEMYPROJECTILE  2DC728
SPAWNENEMYPROJECTILELEFT  2DC7A8
SPAWNENEMYPROJECTILERIGHT  2DC73E
START               1000
THREEDIGIT          2DC70C
TITLELOOP           11C6
TITLEMUSIC          1546
TITLESCREEN         148F3A
TWODIGIT            2DC708
UPDATEDRAWPROJECTILE2LEFT  2DC89E
UPDATEDRAWPROJECTILE2RIGHT  2DC8FA
UPDATEHEALTH        2DC5BE
UPDATEPLAYERSBACKGROUNDS  1390
UPDATEPROJECTILE2POSITIONLEFT  2DC860
UPDATEPROJECTILE2POSITIONRIGHT  2DC8C0
UPDATEPROJECTILESBACKGROUND  2DC814
UPDATEPROJECTILESBACKGROUNDS  1302
UPDATERUNNERGRAVITY  2DCAA6
UPDATESCOREBACKGROUND  13FA
UPDATETINYENEMYPROJECTILELEFT  2DC898
UPDATETINYENEMYPROJECTILERIGHT  2DC8F4
UPROUTINE           2DC310
ZERODIGIT           2DC700
